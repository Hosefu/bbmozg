window.jest_html_reporters_callback__({"numFailedTestSuites":7,"numFailedTests":30,"numPassedTestSuites":0,"numPassedTests":19,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":7,"numTotalTests":49,"startTime":1750977369431,"success":false,"testResults":[{"numFailingTests":10,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750977370750,"runtime":1288,"slow":false,"start":1750977369462},"testFilePath":"/Users/tsekh/Documents/bbmozg/api_test/tests/05-flow-assignment-operations.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m📋 Flow Assignment Operations › Assign Flow › should assign flow to user successfully\u001b[39m\u001b[22m\n\n    The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 40 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(mutation\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'mutation'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { mutation\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeMutation (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:40:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/05-flow-assignment-operations.test.js\u001b[39m\u001b[0m\u001b[2m:21:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m📋 Flow Assignment Operations › Assign Flow › should prevent duplicate assignment\u001b[39m\u001b[22m\n\n    The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 40 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(mutation\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'mutation'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { mutation\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeMutation (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:40:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/05-flow-assignment-operations.test.js\u001b[39m\u001b[0m\u001b[2m:21:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m📋 Flow Assignment Operations › Read Flow Assignments › should fetch all flow assignments\u001b[39m\u001b[22m\n\n    The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 40 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(mutation\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'mutation'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { mutation\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeMutation (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:40:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/05-flow-assignment-operations.test.js\u001b[39m\u001b[0m\u001b[2m:21:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m📋 Flow Assignment Operations › Read Flow Assignments › should fetch assignments by user\u001b[39m\u001b[22m\n\n    The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 40 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(mutation\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'mutation'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { mutation\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeMutation (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:40:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/05-flow-assignment-operations.test.js\u001b[39m\u001b[0m\u001b[2m:21:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m📋 Flow Assignment Operations › Read Flow Assignments › should fetch assignments by flow\u001b[39m\u001b[22m\n\n    The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 40 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(mutation\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'mutation'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { mutation\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeMutation (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:40:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/05-flow-assignment-operations.test.js\u001b[39m\u001b[0m\u001b[2m:21:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m📋 Flow Assignment Operations › Read Flow Assignments › should fetch active assignments\u001b[39m\u001b[22m\n\n    The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 40 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(mutation\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'mutation'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { mutation\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeMutation (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:40:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/05-flow-assignment-operations.test.js\u001b[39m\u001b[0m\u001b[2m:21:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m📋 Flow Assignment Operations › Read Flow Assignments › should fetch overdue assignments\u001b[39m\u001b[22m\n\n    The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 40 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(mutation\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'mutation'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { mutation\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeMutation (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:40:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/05-flow-assignment-operations.test.js\u001b[39m\u001b[0m\u001b[2m:21:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m📋 Flow Assignment Operations › Flow Assignment Lifecycle › should start flow assignment\u001b[39m\u001b[22m\n\n    The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 40 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(mutation\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'mutation'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { mutation\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeMutation (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:40:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/05-flow-assignment-operations.test.js\u001b[39m\u001b[0m\u001b[2m:21:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m📋 Flow Assignment Operations › Flow Assignment Lifecycle › should complete flow assignment\u001b[39m\u001b[22m\n\n    The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 40 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(mutation\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'mutation'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { mutation\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeMutation (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:40:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/05-flow-assignment-operations.test.js\u001b[39m\u001b[0m\u001b[2m:21:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m📋 Flow Assignment Operations › Assignment Validation › should validate assignment input\u001b[39m\u001b[22m\n\n    The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 40 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(mutation\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'mutation'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { mutation\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeMutation (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:40:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/05-flow-assignment-operations.test.js\u001b[39m\u001b[0m\u001b[2m:21:26)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["📋 Flow Assignment Operations","Assign Flow"],"duration":0,"failureMessages":["Error: The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeMutation (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:40:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/05-flow-assignment-operations.test.js:21:26)"],"fullName":"📋 Flow Assignment Operations Assign Flow should assign flow to user successfully","status":"failed","title":"should assign flow to user successfully"},{"ancestorTitles":["📋 Flow Assignment Operations","Assign Flow"],"duration":0,"failureMessages":["Error: The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeMutation (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:40:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/05-flow-assignment-operations.test.js:21:26)"],"fullName":"📋 Flow Assignment Operations Assign Flow should prevent duplicate assignment","status":"failed","title":"should prevent duplicate assignment"},{"ancestorTitles":["📋 Flow Assignment Operations","Read Flow Assignments"],"duration":0,"failureMessages":["Error: The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeMutation (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:40:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/05-flow-assignment-operations.test.js:21:26)"],"fullName":"📋 Flow Assignment Operations Read Flow Assignments should fetch all flow assignments","status":"failed","title":"should fetch all flow assignments"},{"ancestorTitles":["📋 Flow Assignment Operations","Read Flow Assignments"],"duration":0,"failureMessages":["Error: The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeMutation (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:40:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/05-flow-assignment-operations.test.js:21:26)"],"fullName":"📋 Flow Assignment Operations Read Flow Assignments should fetch assignments by user","status":"failed","title":"should fetch assignments by user"},{"ancestorTitles":["📋 Flow Assignment Operations","Read Flow Assignments"],"duration":0,"failureMessages":["Error: The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeMutation (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:40:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/05-flow-assignment-operations.test.js:21:26)"],"fullName":"📋 Flow Assignment Operations Read Flow Assignments should fetch assignments by flow","status":"failed","title":"should fetch assignments by flow"},{"ancestorTitles":["📋 Flow Assignment Operations","Read Flow Assignments"],"duration":0,"failureMessages":["Error: The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeMutation (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:40:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/05-flow-assignment-operations.test.js:21:26)"],"fullName":"📋 Flow Assignment Operations Read Flow Assignments should fetch active assignments","status":"failed","title":"should fetch active assignments"},{"ancestorTitles":["📋 Flow Assignment Operations","Read Flow Assignments"],"duration":1,"failureMessages":["Error: The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeMutation (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:40:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/05-flow-assignment-operations.test.js:21:26)"],"fullName":"📋 Flow Assignment Operations Read Flow Assignments should fetch overdue assignments","status":"failed","title":"should fetch overdue assignments"},{"ancestorTitles":["📋 Flow Assignment Operations","Flow Assignment Lifecycle"],"duration":0,"failureMessages":["Error: The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeMutation (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:40:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/05-flow-assignment-operations.test.js:21:26)"],"fullName":"📋 Flow Assignment Operations Flow Assignment Lifecycle should start flow assignment","status":"failed","title":"should start flow assignment"},{"ancestorTitles":["📋 Flow Assignment Operations","Flow Assignment Lifecycle"],"duration":0,"failureMessages":["Error: The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeMutation (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:40:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/05-flow-assignment-operations.test.js:21:26)"],"fullName":"📋 Flow Assignment Operations Flow Assignment Lifecycle should complete flow assignment","status":"failed","title":"should complete flow assignment"},{"ancestorTitles":["📋 Flow Assignment Operations","Assignment Validation"],"duration":0,"failureMessages":["Error: The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.: {\"response\":{\"errors\":[{\"message\":\"The fields ``telegramId`, `email`, `fullName`, `position`` do not exist on the type `CreateUserInput`.\",\"path\":[\"input\"],\"extensions\":{\"type\":\"CreateUserInput\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n      mutation CreateUser($input: CreateUserInput!) {\\n        createUser(input: $input) {\\n          id\\n        }\\n      }\\n    \",\"variables\":{\"input\":{\"telegramId\":181402,\"email\":\"assignment-test-1750977369644@example.com\",\"fullName\":\"Assignment Test User\",\"position\":\"Learner\"}}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeMutation (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:40:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/05-flow-assignment-operations.test.js:21:26)"],"fullName":"📋 Flow Assignment Operations Assignment Validation should validate assignment input","status":"failed","title":"should validate assignment input"}]},{"numFailingTests":6,"numPassingTests":1,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750977371852,"runtime":1094,"slow":false,"start":1750977370758},"testFilePath":"/Users/tsekh/Documents/bbmozg/api_test/tests/04-flow-operations.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m🔄 Flow Operations (CRUD) › Create Flow › should create a new flow successfully\u001b[39m\u001b[22m\n\n    Не удалось создать флоу: User not authenticated: {\"response\":{\"errors\":[{\"message\":\"Не удалось создать флоу: User not authenticated\"}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        mutation CreateFlow($input: CreateFlowInput!) {\\n          createFlow(input: $input) {\\n            id\\n            title\\n            status\\n          }\\n        }\\n      \",\"variables\":{\"input\":{\"title\":\"Test Flow E2E 1750977370781\",\"description\":\"Comprehensive E2E test flow for API validation\",\"isSequential\":true,\"allowRetry\":true,\"timeLimit\":30,\"passingScore\":80}}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 40 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(mutation\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'mutation'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { mutation\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeMutation (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:40:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/04-flow-operations.test.js\u001b[39m\u001b[0m\u001b[2m:35:24)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m🔄 Flow Operations (CRUD) › Read Flows › should fetch all flows\u001b[39m\u001b[22m\n\n    The field `category` does not exist on the type `Flow`.: {\"response\":{\"errors\":[{\"message\":\"The field `category` does not exist on the type `Flow`.\",\"locations\":[{\"line\":8,\"column\":13}],\"path\":[\"flows\"],\"extensions\":{\"type\":\"Flow\",\"field\":\"category\",\"responseName\":\"category\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetFlows($skip: Int, $take: Int) {\\n          flows(skip: $skip, take: $take) {\\n            id\\n            title\\n            description\\n            status\\n            category\\n            priority\\n            isRequired\\n            createdAt\\n            updatedAt\\n          }\\n        }\\n      \",\"variables\":{\"skip\":0,\"take\":10}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 20 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(query\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'query'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { query\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeQuery (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:20:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/04-flow-operations.test.js\u001b[39m\u001b[0m\u001b[2m:89:24)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m🔄 Flow Operations (CRUD) › Read Flows › should fetch flow by ID\u001b[39m\u001b[22m\n\n    Variable `id` is required.: {\"response\":{\"errors\":[{\"message\":\"Variable `id` is required.\",\"locations\":[{\"line\":2,\"column\":23}],\"extensions\":{\"code\":\"HC0018\",\"variable\":\"id\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetFlow($id: UUID!) {\\n          flow(id: $id) {\\n            id\\n            title\\n            description\\n            status\\n            createdAt\\n            updatedAt\\n          }\\n        }\\n      \",\"variables\":{}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 20 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(query\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'query'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { query\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeQuery (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:20:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/04-flow-operations.test.js\u001b[39m\u001b[0m\u001b[2m:114:24)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m🔄 Flow Operations (CRUD) › Read Flows › should search flows by title\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeDefined\u001b[2m()\u001b[22m\n\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 144 |\u001b[39m       \u001b[90m// Should find our test flow\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 145 |\u001b[39m       \u001b[36mconst\u001b[39m foundFlow \u001b[33m=\u001b[39m response\u001b[33m.\u001b[39msearchFlows\u001b[33m.\u001b[39mfind(flow \u001b[33m=>\u001b[39m flow\u001b[33m.\u001b[39mtitle \u001b[33m===\u001b[39m testFlowTitle)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 146 |\u001b[39m       expect(foundFlow)\u001b[33m.\u001b[39mtoBeDefined()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 147 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 148 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 149 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeDefined (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/04-flow-operations.test.js\u001b[39m\u001b[0m\u001b[2m:146:25)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m🔄 Flow Operations (CRUD) › Update Flow › should update flow successfully\u001b[39m\u001b[22m\n\n    FlowStatus cannot parse the given literal of type `EnumValueNode`.: {\"response\":{\"errors\":[{\"message\":\"FlowStatus cannot parse the given literal of type `EnumValueNode`.\",\"path\":[\"input\",\"status\"],\"extensions\":{\"field\":\"UpdateFlowInput.status\",\"fieldType\":\"FlowStatus\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        mutation UpdateFlow($input: UpdateFlowInput!) {\\n          updateFlow(input: $input) {\\n            id\\n            title\\n            description\\n            status\\n          }\\n        }\\n      \",\"variables\":{\"input\":{\"title\":\"Test Flow E2E 1750977370781 - Updated\",\"description\":\"Updated description for E2E testing\",\"status\":\"Draft\"}}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 40 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(mutation\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'mutation'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { mutation\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeMutation (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:40:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/04-flow-operations.test.js\u001b[39m\u001b[0m\u001b[2m:173:24)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m🔄 Flow Operations (CRUD) › Flow Categories and Tags › should handle flow with categories and tags\u001b[39m\u001b[22m\n\n    The field `category` does not exist on the type `Flow`.: {\"response\":{\"errors\":[{\"message\":\"The field `category` does not exist on the type `Flow`.\",\"locations\":[{\"line\":6,\"column\":13}],\"path\":[\"updateFlow\"],\"extensions\":{\"type\":\"Flow\",\"field\":\"category\",\"responseName\":\"category\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        mutation UpdateFlow($input: UpdateFlowInput!) {\\n          updateFlow(input: $input) {\\n            id\\n            title\\n            category\\n            tags\\n          }\\n        }\\n      \",\"variables\":{\"input\":{\"category\":\"Testing\",\"tags\":\"e2e,automation,api\"}}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 40 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(mutation\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'mutation'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { mutation\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeMutation (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:40:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/04-flow-operations.test.js\u001b[39m\u001b[0m\u001b[2m:203:24)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["🔄 Flow Operations (CRUD)","Create Flow"],"duration":6,"failureMessages":["Error: Не удалось создать флоу: User not authenticated: {\"response\":{\"errors\":[{\"message\":\"Не удалось создать флоу: User not authenticated\"}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        mutation CreateFlow($input: CreateFlowInput!) {\\n          createFlow(input: $input) {\\n            id\\n            title\\n            status\\n          }\\n        }\\n      \",\"variables\":{\"input\":{\"title\":\"Test Flow E2E 1750977370781\",\"description\":\"Comprehensive E2E test flow for API validation\",\"isSequential\":true,\"allowRetry\":true,\"timeLimit\":30,\"passingScore\":80}}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeMutation (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:40:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/04-flow-operations.test.js:35:24)"],"fullName":"🔄 Flow Operations (CRUD) Create Flow should create a new flow successfully","status":"failed","title":"should create a new flow successfully"},{"ancestorTitles":["🔄 Flow Operations (CRUD)","Create Flow"],"duration":6,"failureMessages":[],"fullName":"🔄 Flow Operations (CRUD) Create Flow should validate required fields on flow creation","status":"passed","title":"should validate required fields on flow creation"},{"ancestorTitles":["🔄 Flow Operations (CRUD)","Read Flows"],"duration":3,"failureMessages":["Error: The field `category` does not exist on the type `Flow`.: {\"response\":{\"errors\":[{\"message\":\"The field `category` does not exist on the type `Flow`.\",\"locations\":[{\"line\":8,\"column\":13}],\"path\":[\"flows\"],\"extensions\":{\"type\":\"Flow\",\"field\":\"category\",\"responseName\":\"category\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetFlows($skip: Int, $take: Int) {\\n          flows(skip: $skip, take: $take) {\\n            id\\n            title\\n            description\\n            status\\n            category\\n            priority\\n            isRequired\\n            createdAt\\n            updatedAt\\n          }\\n        }\\n      \",\"variables\":{\"skip\":0,\"take\":10}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeQuery (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:20:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/04-flow-operations.test.js:89:24)"],"fullName":"🔄 Flow Operations (CRUD) Read Flows should fetch all flows","status":"failed","title":"should fetch all flows"},{"ancestorTitles":["🔄 Flow Operations (CRUD)","Read Flows"],"duration":3,"failureMessages":["Error: Variable `id` is required.: {\"response\":{\"errors\":[{\"message\":\"Variable `id` is required.\",\"locations\":[{\"line\":2,\"column\":23}],\"extensions\":{\"code\":\"HC0018\",\"variable\":\"id\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetFlow($id: UUID!) {\\n          flow(id: $id) {\\n            id\\n            title\\n            description\\n            status\\n            createdAt\\n            updatedAt\\n          }\\n        }\\n      \",\"variables\":{}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeQuery (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:20:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/04-flow-operations.test.js:114:24)"],"fullName":"🔄 Flow Operations (CRUD) Read Flows should fetch flow by ID","status":"failed","title":"should fetch flow by ID"},{"ancestorTitles":["🔄 Flow Operations (CRUD)","Read Flows"],"duration":10,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeDefined\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.toBeDefined (/Users/tsekh/Documents/bbmozg/api_test/tests/04-flow-operations.test.js:146:25)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"🔄 Flow Operations (CRUD) Read Flows should search flows by title","status":"failed","title":"should search flows by title"},{"ancestorTitles":["🔄 Flow Operations (CRUD)","Update Flow"],"duration":4,"failureMessages":["Error: FlowStatus cannot parse the given literal of type `EnumValueNode`.: {\"response\":{\"errors\":[{\"message\":\"FlowStatus cannot parse the given literal of type `EnumValueNode`.\",\"path\":[\"input\",\"status\"],\"extensions\":{\"field\":\"UpdateFlowInput.status\",\"fieldType\":\"FlowStatus\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        mutation UpdateFlow($input: UpdateFlowInput!) {\\n          updateFlow(input: $input) {\\n            id\\n            title\\n            description\\n            status\\n          }\\n        }\\n      \",\"variables\":{\"input\":{\"title\":\"Test Flow E2E 1750977370781 - Updated\",\"description\":\"Updated description for E2E testing\",\"status\":\"Draft\"}}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeMutation (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:40:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/04-flow-operations.test.js:173:24)"],"fullName":"🔄 Flow Operations (CRUD) Update Flow should update flow successfully","status":"failed","title":"should update flow successfully"},{"ancestorTitles":["🔄 Flow Operations (CRUD)","Flow Categories and Tags"],"duration":3,"failureMessages":["Error: The field `category` does not exist on the type `Flow`.: {\"response\":{\"errors\":[{\"message\":\"The field `category` does not exist on the type `Flow`.\",\"locations\":[{\"line\":6,\"column\":13}],\"path\":[\"updateFlow\"],\"extensions\":{\"type\":\"Flow\",\"field\":\"category\",\"responseName\":\"category\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        mutation UpdateFlow($input: UpdateFlowInput!) {\\n          updateFlow(input: $input) {\\n            id\\n            title\\n            category\\n            tags\\n          }\\n        }\\n      \",\"variables\":{\"input\":{\"category\":\"Testing\",\"tags\":\"e2e,automation,api\"}}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeMutation (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:40:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/04-flow-operations.test.js:203:24)"],"fullName":"🔄 Flow Operations (CRUD) Flow Categories and Tags should handle flow with categories and tags","status":"failed","title":"should handle flow with categories and tags"}]},{"numFailingTests":4,"numPassingTests":5,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750977373060,"runtime":1200,"slow":false,"start":1750977371860},"testFilePath":"/Users/tsekh/Documents/bbmozg/api_test/tests/06-performance-stress.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m⚡ Performance & Stress Tests › Response Time Tests › User list query should respond within 1 second\u001b[39m\u001b[22m\n\n    The field `email` does not exist on the type `User`.: {\"response\":{\"errors\":[{\"message\":\"The field `email` does not exist on the type `User`.\",\"locations\":[{\"line\":5,\"column\":13}],\"path\":[\"users\"],\"extensions\":{\"type\":\"User\",\"field\":\"email\",\"responseName\":\"email\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetUsers {\\n          users(take: 10) {\\n            id\\n            email\\n            firstName\\n            lastName\\n          }\\n        }\\n      \",\"variables\":{}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 20 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(query\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'query'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { query\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeQuery (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:20:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/06-performance-stress.test.js\u001b[39m\u001b[0m\u001b[2m:46:7)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m⚡ Performance & Stress Tests › Concurrent Request Tests › should handle multiple concurrent GraphQL queries\u001b[39m\u001b[22m\n\n    The field `email` does not exist on the type `User`.: {\"response\":{\"errors\":[{\"message\":\"The field `email` does not exist on the type `User`.\",\"locations\":[{\"line\":5,\"column\":13}],\"path\":[\"users\"],\"extensions\":{\"type\":\"User\",\"field\":\"email\",\"responseName\":\"email\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetUsers {\\n          users(take: 5) {\\n            id\\n            email\\n          }\\n        }\\n      \",\"variables\":{}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 20 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(query\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'query'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { query\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeQuery (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:20:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m          at async Promise.all (index 4)\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/06-performance-stress.test.js\u001b[39m\u001b[0m\u001b[2m:90:25)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m⚡ Performance & Stress Tests › Large Dataset Tests › should handle large result sets efficiently\u001b[39m\u001b[22m\n\n    The field `email` does not exist on the type `User`.: {\"response\":{\"errors\":[{\"message\":\"The field `email` does not exist on the type `User`.\",\"locations\":[{\"line\":5,\"column\":13}],\"path\":[\"users\"],\"extensions\":{\"type\":\"User\",\"field\":\"email\",\"responseName\":\"email\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetUsers($take: Int) {\\n          users(take: $take) {\\n            id\\n            email\\n            firstName\\n            lastName\\n            position\\n            createdAt\\n          }\\n        }\\n      \",\"variables\":{\"take\":100}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 20 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(query\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'query'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { query\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeQuery (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:20:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/06-performance-stress.test.js\u001b[39m\u001b[0m\u001b[2m:116:24)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m⚡ Performance & Stress Tests › Memory and Resource Tests › should handle repeated requests without memory leaks\u001b[39m\u001b[22m\n\n    The field `email` does not exist on the type `User`.: {\"response\":{\"errors\":[{\"message\":\"The field `email` does not exist on the type `User`.\",\"locations\":[{\"line\":5,\"column\":13}],\"path\":[\"users\"],\"extensions\":{\"type\":\"User\",\"field\":\"email\",\"responseName\":\"email\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetUsers {\\n          users(take: 1) {\\n            id\\n            email\\n          }\\n        }\\n      \",\"variables\":{}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 20 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(query\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'query'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { query\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeQuery (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:20:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/06-performance-stress.test.js\u001b[39m\u001b[0m\u001b[2m:174:9)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["⚡ Performance & Stress Tests","Response Time Tests"],"duration":7,"failureMessages":[],"fullName":"⚡ Performance & Stress Tests Response Time Tests GraphQL introspection should respond within 2 seconds","status":"passed","title":"GraphQL introspection should respond within 2 seconds"},{"ancestorTitles":["⚡ Performance & Stress Tests","Response Time Tests"],"duration":25,"failureMessages":[],"fullName":"⚡ Performance & Stress Tests Response Time Tests Health check should respond within 500ms","status":"passed","title":"Health check should respond within 500ms"},{"ancestorTitles":["⚡ Performance & Stress Tests","Response Time Tests"],"duration":4,"failureMessages":["Error: The field `email` does not exist on the type `User`.: {\"response\":{\"errors\":[{\"message\":\"The field `email` does not exist on the type `User`.\",\"locations\":[{\"line\":5,\"column\":13}],\"path\":[\"users\"],\"extensions\":{\"type\":\"User\",\"field\":\"email\",\"responseName\":\"email\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetUsers {\\n          users(take: 10) {\\n            id\\n            email\\n            firstName\\n            lastName\\n          }\\n        }\\n      \",\"variables\":{}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeQuery (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:20:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/06-performance-stress.test.js:46:7)"],"fullName":"⚡ Performance & Stress Tests Response Time Tests User list query should respond within 1 second","status":"failed","title":"User list query should respond within 1 second"},{"ancestorTitles":["⚡ Performance & Stress Tests","Concurrent Request Tests"],"duration":34,"failureMessages":[],"fullName":"⚡ Performance & Stress Tests Concurrent Request Tests should handle multiple concurrent health checks","status":"passed","title":"should handle multiple concurrent health checks"},{"ancestorTitles":["⚡ Performance & Stress Tests","Concurrent Request Tests"],"duration":14,"failureMessages":["Error: The field `email` does not exist on the type `User`.: {\"response\":{\"errors\":[{\"message\":\"The field `email` does not exist on the type `User`.\",\"locations\":[{\"line\":5,\"column\":13}],\"path\":[\"users\"],\"extensions\":{\"type\":\"User\",\"field\":\"email\",\"responseName\":\"email\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetUsers {\\n          users(take: 5) {\\n            id\\n            email\\n          }\\n        }\\n      \",\"variables\":{}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeQuery (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:20:18)\n    at async Promise.all (index 4)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/06-performance-stress.test.js:90:25)"],"fullName":"⚡ Performance & Stress Tests Concurrent Request Tests should handle multiple concurrent GraphQL queries","status":"failed","title":"should handle multiple concurrent GraphQL queries"},{"ancestorTitles":["⚡ Performance & Stress Tests","Large Dataset Tests"],"duration":8,"failureMessages":["Error: The field `email` does not exist on the type `User`.: {\"response\":{\"errors\":[{\"message\":\"The field `email` does not exist on the type `User`.\",\"locations\":[{\"line\":5,\"column\":13}],\"path\":[\"users\"],\"extensions\":{\"type\":\"User\",\"field\":\"email\",\"responseName\":\"email\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetUsers($take: Int) {\\n          users(take: $take) {\\n            id\\n            email\\n            firstName\\n            lastName\\n            position\\n            createdAt\\n          }\\n        }\\n      \",\"variables\":{\"take\":100}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeQuery (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:20:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/06-performance-stress.test.js:116:24)"],"fullName":"⚡ Performance & Stress Tests Large Dataset Tests should handle large result sets efficiently","status":"failed","title":"should handle large result sets efficiently"},{"ancestorTitles":["⚡ Performance & Stress Tests","Error Handling Performance"],"duration":3,"failureMessages":[],"fullName":"⚡ Performance & Stress Tests Error Handling Performance should handle invalid queries quickly","status":"passed","title":"should handle invalid queries quickly"},{"ancestorTitles":["⚡ Performance & Stress Tests","Error Handling Performance"],"duration":23,"failureMessages":[],"fullName":"⚡ Performance & Stress Tests Error Handling Performance should handle invalid REST endpoints quickly","status":"passed","title":"should handle invalid REST endpoints quickly"},{"ancestorTitles":["⚡ Performance & Stress Tests","Memory and Resource Tests"],"duration":4,"failureMessages":["Error: The field `email` does not exist on the type `User`.: {\"response\":{\"errors\":[{\"message\":\"The field `email` does not exist on the type `User`.\",\"locations\":[{\"line\":5,\"column\":13}],\"path\":[\"users\"],\"extensions\":{\"type\":\"User\",\"field\":\"email\",\"responseName\":\"email\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetUsers {\\n          users(take: 1) {\\n            id\\n            email\\n          }\\n        }\\n      \",\"variables\":{}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeQuery (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:20:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/06-performance-stress.test.js:174:9)"],"fullName":"⚡ Performance & Stress Tests Memory and Resource Tests should handle repeated requests without memory leaks","status":"failed","title":"should handle repeated requests without memory leaks"}]},{"numFailingTests":1,"numPassingTests":2,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750977374129,"runtime":1061,"slow":false,"start":1750977373068},"testFilePath":"/Users/tsekh/Documents/bbmozg/api_test/tests/01-health-check.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m🏥 Health Check & Basic Connectivity › API should return proper headers\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\n    Expected substring: \u001b[32m\"application/json\"\u001b[39m\n    Received string:    \u001b[31m\"text/plain\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 30 |\u001b[39m     console\u001b[33m.\u001b[39mlog(\u001b[32m'Actual headers:'\u001b[39m\u001b[33m,\u001b[39m response\u001b[33m.\u001b[39mheaders)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 31 |\u001b[39m     console\u001b[33m.\u001b[39mlog(\u001b[32m'Content-Type:'\u001b[39m\u001b[33m,\u001b[39m response\u001b[33m.\u001b[39mheaders[\u001b[32m'content-type'\u001b[39m])\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 32 |\u001b[39m     expect(response\u001b[33m.\u001b[39mheaders[\u001b[32m'content-type'\u001b[39m])\u001b[33m.\u001b[39mtoContain(\u001b[32m'application/json'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 33 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 34 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toContain (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/01-health-check.test.js\u001b[39m\u001b[0m\u001b[2m:32:46)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["🏥 Health Check & Basic Connectivity"],"duration":7,"failureMessages":[],"fullName":"🏥 Health Check & Basic Connectivity API server should be accessible","status":"passed","title":"API server should be accessible"},{"ancestorTitles":["🏥 Health Check & Basic Connectivity"],"duration":4,"failureMessages":[],"fullName":"🏥 Health Check & Basic Connectivity GraphQL endpoint should be accessible","status":"passed","title":"GraphQL endpoint should be accessible"},{"ancestorTitles":["🏥 Health Check & Basic Connectivity"],"duration":4,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected substring: \u001b[32m\"application/json\"\u001b[39m\nReceived string:    \u001b[31m\"text/plain\"\u001b[39m\n    at Object.toContain (/Users/tsekh/Documents/bbmozg/api_test/tests/01-health-check.test.js:32:46)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"🏥 Health Check & Basic Connectivity API should return proper headers","status":"failed","title":"API should return proper headers"}]},{"numFailingTests":1,"numPassingTests":3,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750977375222,"runtime":1085,"slow":false,"start":1750977374137},"testFilePath":"/Users/tsekh/Documents/bbmozg/api_test/tests/02-graphql-schema.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m📋 GraphQL Schema & Introspection › Schema should have expected custom types\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\n    Expected value: \u001b[32m\"UserDto\"\u001b[39m\n    Received array: \u001b[31m[\"__Directive\", \"__DirectiveLocation\", \"__EnumValue\", \"__Field\", \"__InputValue\", \"__Schema\", \"__Type\", \"__TypeKind\", \"User\", \"Flow\", …]\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 55 |\u001b[39m     \u001b[22m\n\u001b[2m     \u001b[90m 56 |\u001b[39m     \u001b[90m// Check for expected custom types\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 57 |\u001b[39m     expect(typeNames)\u001b[33m.\u001b[39mtoContain(\u001b[32m'UserDto'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                       \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 58 |\u001b[39m     expect(typeNames)\u001b[33m.\u001b[39mtoContain(\u001b[32m'FlowDto'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 59 |\u001b[39m     expect(typeNames)\u001b[33m.\u001b[39mtoContain(\u001b[32m'FlowAssignmentDto'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 60 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toContain (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/02-graphql-schema.test.js\u001b[39m\u001b[0m\u001b[2m:57:23)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["📋 GraphQL Schema & Introspection"],"duration":11,"failureMessages":[],"fullName":"📋 GraphQL Schema & Introspection GraphQL schema should be introspectable","status":"passed","title":"GraphQL schema should be introspectable"},{"ancestorTitles":["📋 GraphQL Schema & Introspection"],"duration":6,"failureMessages":[],"fullName":"📋 GraphQL Schema & Introspection Schema should have expected query types","status":"passed","title":"Schema should have expected query types"},{"ancestorTitles":["📋 GraphQL Schema & Introspection"],"duration":4,"failureMessages":[],"fullName":"📋 GraphQL Schema & Introspection Schema should have expected mutation types","status":"passed","title":"Schema should have expected mutation types"},{"ancestorTitles":["📋 GraphQL Schema & Introspection"],"duration":5,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected value: \u001b[32m\"UserDto\"\u001b[39m\nReceived array: \u001b[31m[\"__Directive\", \"__DirectiveLocation\", \"__EnumValue\", \"__Field\", \"__InputValue\", \"__Schema\", \"__Type\", \"__TypeKind\", \"User\", \"Flow\", …]\u001b[39m\n    at Object.toContain (/Users/tsekh/Documents/bbmozg/api_test/tests/02-graphql-schema.test.js:57:23)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"📋 GraphQL Schema & Introspection Schema should have expected custom types","status":"failed","title":"Schema should have expected custom types"}]},{"numFailingTests":5,"numPassingTests":1,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750977376328,"runtime":1100,"slow":false,"start":1750977375228},"testFilePath":"/Users/tsekh/Documents/bbmozg/api_test/tests/03-user-operations.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m👤 User Operations (CRUD) › Create User › should create a new user successfully\u001b[39m\u001b[22m\n\n    The field `email` does not exist on the type `User`.: {\"response\":{\"errors\":[{\"message\":\"The field `email` does not exist on the type `User`.\",\"locations\":[{\"line\":5,\"column\":13}],\"path\":[\"createUser\"],\"extensions\":{\"type\":\"User\",\"field\":\"email\",\"responseName\":\"email\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        mutation CreateUser($input: CreateUserInput!) {\\n          createUser(input: $input) {\\n            id\\n            email\\n            firstName\\n            lastName\\n            position\\n            language\\n            isActive\\n            createdAt\\n          }\\n        }\\n      \",\"variables\":{\"input\":{\"telegramId\":23538,\"email\":\"test-1750977375270@example.com\",\"fullName\":\"Test User E2E\",\"position\":\"QA Engineer\"}}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 40 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(mutation\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'mutation'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { mutation\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeMutation (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:40:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/03-user-operations.test.js\u001b[39m\u001b[0m\u001b[2m:39:24)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m👤 User Operations (CRUD) › Create User › should fail to create user with duplicate telegram ID\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\n    Expected substring: \u001b[32m\"уже существует\"\u001b[39m\n    Received string:    \u001b[31m\"The field `email` does not exist on the type `User`.: {\\\"response\\\":{\\\"errors\\\":[{\\\"message\\\":\\\"The field `email` does not exist on the type `User`.\\\",\\\"locations\\\":[{\\\"line\\\":5,\\\"column\\\":13}],\\\"path\\\":[\\\"createUser\\\"],\\\"extensions\\\":{\\\"type\\\":\\\"User\\\",\\\"field\\\":\\\"email\\\",\\\"responseName\\\":\\\"email\\\",\\\"specifiedBy\\\":\\\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\\\"}}],\\\"status\\\":200,\\\"headers\\\":{}},\\\"request\\\":{\\\"query\\\":\\\"\\\\n        mutation CreateUser($input: CreateUserInput!) {\\\\n          createUser(input: $input) {\\\\n            id\\\\n            email\\\\n          }\\\\n        }\\\\n      \\\",\\\"variables\\\":{\\\"input\\\":{\\\"telegramId\\\":123456,\\\"email\\\":\\\"duplicate-1750977375288@example.com\\\",\\\"fullName\\\":\\\"Duplicate User\\\",\\\"position\\\":\\\"Test\\\"}}}}\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 73 |\u001b[39m         fail(\u001b[32m'Should have thrown an error for duplicate telegram ID'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m       } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 75 |\u001b[39m         expect(error\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoContain(\u001b[32m'уже существует'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 76 |\u001b[39m       }\u001b[22m\n\u001b[2m     \u001b[90m 77 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 78 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toContain (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/03-user-operations.test.js\u001b[39m\u001b[0m\u001b[2m:75:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m👤 User Operations (CRUD) › Read Users › should fetch all users\u001b[39m\u001b[22m\n\n    The field `email` does not exist on the type `User`.: {\"response\":{\"errors\":[{\"message\":\"The field `email` does not exist on the type `User`.\",\"locations\":[{\"line\":5,\"column\":13}],\"path\":[\"users\"],\"extensions\":{\"type\":\"User\",\"field\":\"email\",\"responseName\":\"email\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetUsers($skip: Int, $take: Int) {\\n          users(skip: $skip, take: $take) {\\n            id\\n            email\\n            firstName\\n            lastName\\n            position\\n            isActive\\n            createdAt\\n          }\\n        }\\n      \",\"variables\":{\"skip\":0,\"take\":10}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 20 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(query\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'query'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { query\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeQuery (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:20:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/03-user-operations.test.js\u001b[39m\u001b[0m\u001b[2m:97:24)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m👤 User Operations (CRUD) › Read Users › should fetch user by ID\u001b[39m\u001b[22m\n\n    The field `email` does not exist on the type `User`.: {\"response\":{\"errors\":[{\"message\":\"The field `email` does not exist on the type `User`.\",\"locations\":[{\"line\":5,\"column\":13}],\"path\":[\"user\"],\"extensions\":{\"type\":\"User\",\"field\":\"email\",\"responseName\":\"email\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetUser($id: UUID!) {\\n          user(id: $id) {\\n            id\\n            email\\n            firstName\\n            lastName\\n            position\\n            isActive\\n            createdAt\\n          }\\n        }\\n      \",\"variables\":{}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 20 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(query\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'query'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { query\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeQuery (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:20:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/03-user-operations.test.js\u001b[39m\u001b[0m\u001b[2m:124:24)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m👤 User Operations (CRUD) › Update User › should update user successfully\u001b[39m\u001b[22m\n\n    The field `email` does not exist on the type `User`.: {\"response\":{\"errors\":[{\"message\":\"The field `email` does not exist on the type `User`.\",\"locations\":[{\"line\":5,\"column\":13}],\"path\":[\"updateUser\"],\"extensions\":{\"type\":\"User\",\"field\":\"email\",\"responseName\":\"email\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        mutation UpdateUser($input: UpdateUserInput!) {\\n          updateUser(input: $input) {\\n            id\\n            email\\n            fullName\\n            position\\n            isActive\\n          }\\n        }\\n      \",\"variables\":{\"input\":{\"email\":\"test-1750977375270@example.com\",\"fullName\":\"Updated Test User\",\"position\":\"Senior QA Engineer\",\"isActive\":true}}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 40 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(mutation\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'mutation'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { mutation\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeMutation (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:40:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/03-user-operations.test.js\u001b[39m\u001b[0m\u001b[2m:156:24)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["👤 User Operations (CRUD)","Create User"],"duration":12,"failureMessages":["Error: The field `email` does not exist on the type `User`.: {\"response\":{\"errors\":[{\"message\":\"The field `email` does not exist on the type `User`.\",\"locations\":[{\"line\":5,\"column\":13}],\"path\":[\"createUser\"],\"extensions\":{\"type\":\"User\",\"field\":\"email\",\"responseName\":\"email\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        mutation CreateUser($input: CreateUserInput!) {\\n          createUser(input: $input) {\\n            id\\n            email\\n            firstName\\n            lastName\\n            position\\n            language\\n            isActive\\n            createdAt\\n          }\\n        }\\n      \",\"variables\":{\"input\":{\"telegramId\":23538,\"email\":\"test-1750977375270@example.com\",\"fullName\":\"Test User E2E\",\"position\":\"QA Engineer\"}}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeMutation (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:40:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/03-user-operations.test.js:39:24)"],"fullName":"👤 User Operations (CRUD) Create User should create a new user successfully","status":"failed","title":"should create a new user successfully"},{"ancestorTitles":["👤 User Operations (CRUD)","Create User"],"duration":4,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected substring: \u001b[32m\"уже существует\"\u001b[39m\nReceived string:    \u001b[31m\"The field `email` does not exist on the type `User`.: {\\\"response\\\":{\\\"errors\\\":[{\\\"message\\\":\\\"The field `email` does not exist on the type `User`.\\\",\\\"locations\\\":[{\\\"line\\\":5,\\\"column\\\":13}],\\\"path\\\":[\\\"createUser\\\"],\\\"extensions\\\":{\\\"type\\\":\\\"User\\\",\\\"field\\\":\\\"email\\\",\\\"responseName\\\":\\\"email\\\",\\\"specifiedBy\\\":\\\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\\\"}}],\\\"status\\\":200,\\\"headers\\\":{}},\\\"request\\\":{\\\"query\\\":\\\"\\\\n        mutation CreateUser($input: CreateUserInput!) {\\\\n          createUser(input: $input) {\\\\n            id\\\\n            email\\\\n          }\\\\n        }\\\\n      \\\",\\\"variables\\\":{\\\"input\\\":{\\\"telegramId\\\":123456,\\\"email\\\":\\\"duplicate-1750977375288@example.com\\\",\\\"fullName\\\":\\\"Duplicate User\\\",\\\"position\\\":\\\"Test\\\"}}}}\"\u001b[39m\n    at Object.toContain (/Users/tsekh/Documents/bbmozg/api_test/tests/03-user-operations.test.js:75:31)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"👤 User Operations (CRUD) Create User should fail to create user with duplicate telegram ID","status":"failed","title":"should fail to create user with duplicate telegram ID"},{"ancestorTitles":["👤 User Operations (CRUD)","Read Users"],"duration":4,"failureMessages":["Error: The field `email` does not exist on the type `User`.: {\"response\":{\"errors\":[{\"message\":\"The field `email` does not exist on the type `User`.\",\"locations\":[{\"line\":5,\"column\":13}],\"path\":[\"users\"],\"extensions\":{\"type\":\"User\",\"field\":\"email\",\"responseName\":\"email\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetUsers($skip: Int, $take: Int) {\\n          users(skip: $skip, take: $take) {\\n            id\\n            email\\n            firstName\\n            lastName\\n            position\\n            isActive\\n            createdAt\\n          }\\n        }\\n      \",\"variables\":{\"skip\":0,\"take\":10}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeQuery (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:20:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/03-user-operations.test.js:97:24)"],"fullName":"👤 User Operations (CRUD) Read Users should fetch all users","status":"failed","title":"should fetch all users"},{"ancestorTitles":["👤 User Operations (CRUD)","Read Users"],"duration":3,"failureMessages":["Error: The field `email` does not exist on the type `User`.: {\"response\":{\"errors\":[{\"message\":\"The field `email` does not exist on the type `User`.\",\"locations\":[{\"line\":5,\"column\":13}],\"path\":[\"user\"],\"extensions\":{\"type\":\"User\",\"field\":\"email\",\"responseName\":\"email\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetUser($id: UUID!) {\\n          user(id: $id) {\\n            id\\n            email\\n            firstName\\n            lastName\\n            position\\n            isActive\\n            createdAt\\n          }\\n        }\\n      \",\"variables\":{}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeQuery (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:20:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/03-user-operations.test.js:124:24)"],"fullName":"👤 User Operations (CRUD) Read Users should fetch user by ID","status":"failed","title":"should fetch user by ID"},{"ancestorTitles":["👤 User Operations (CRUD)","Update User"],"duration":8,"failureMessages":["Error: The field `email` does not exist on the type `User`.: {\"response\":{\"errors\":[{\"message\":\"The field `email` does not exist on the type `User`.\",\"locations\":[{\"line\":5,\"column\":13}],\"path\":[\"updateUser\"],\"extensions\":{\"type\":\"User\",\"field\":\"email\",\"responseName\":\"email\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        mutation UpdateUser($input: UpdateUserInput!) {\\n          updateUser(input: $input) {\\n            id\\n            email\\n            fullName\\n            position\\n            isActive\\n          }\\n        }\\n      \",\"variables\":{\"input\":{\"email\":\"test-1750977375270@example.com\",\"fullName\":\"Updated Test User\",\"position\":\"Senior QA Engineer\",\"isActive\":true}}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeMutation (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:40:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/03-user-operations.test.js:156:24)"],"fullName":"👤 User Operations (CRUD) Update User should update user successfully","status":"failed","title":"should update user successfully"},{"ancestorTitles":["👤 User Operations (CRUD)","User Validation"],"duration":3,"failureMessages":[],"fullName":"👤 User Operations (CRUD) User Validation should validate required fields on user creation","status":"passed","title":"should validate required fields on user creation"}]},{"numFailingTests":3,"numPassingTests":7,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750977377993,"runtime":1656,"slow":false,"start":1750977376337},"testFilePath":"/Users/tsekh/Documents/bbmozg/api_test/tests/08-designer-onboarding-simple.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m🎨 Онбординг дизайнера - Упрощенный сценарий › 3. 📝 Добавление компонентов в первый шаг › Добавить компонент квиза: \"Проверка знаний о компании\"\u001b[39m\u001b[22m\n\n    Не удалось создать компонент: {\"response\":{\"errors\":[{\"message\":\"Не удалось создать компонент\"}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        mutation CreateComponent($input: CreateComponentInput!) {\\n          createComponent(input: $input) {\\n            quiz {\\n              isSuccess\\n              message\\n              componentId\\n              linkId\\n              component {\\n                id\\n                title\\n                description\\n                questionText\\n                options {\\n                  id\\n                  text\\n                  isCorrect\\n                  message\\n                  points\\n                }\\n              }\\n            }\\n          }\\n        }\\n      \",\"variables\":{\"input\":{\"quiz\":{\"flowStepId\":\"2b8c8eb7-d64a-4cd1-84ff-85270bad29d7\",\"title\":\"Проверка знаний о компании\",\"description\":\"Тест для проверки понимания структуры компании и её ценностей\",\"questionText\":\"Какая из перечисленных ценностей НЕ является основной ценностью нашей компании?\",\"options\":[{\"text\":\"Пользователь в центре\",\"isCorrect\":false,\"message\":\"Это одна из наших ключевых ценностей!\",\"points\":0},{\"text\":\"Максимизация прибыли любой ценой\",\"isCorrect\":true,\"message\":\"Правильно! Мы ставим качество и пользователей выше краткосрочной прибыли.\",\"points\":25},{\"text\":\"Качество превыше всего\",\"isCorrect\":false,\"message\":\"Это одна из наших основных ценностей.\",\"points\":0},{\"text\":\"Непрерывное обучение\",\"isCorrect\":false,\"message\":\"Мы действительно ценим постоянное развитие.\",\"points\":0}],\"isRequired\":true,\"estimatedDurationMinutes\":5}}}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 40 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(mutation\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'mutation'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { mutation\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeMutation (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:40:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/08-designer-onboarding-simple.test.js\u001b[39m\u001b[0m\u001b[2m:292:24)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m🎨 Онбординг дизайнера - Упрощенный сценарий › 5. 🔄 Изменение порядка компонентов › Переместить компоненты для оптимального порядка обучения\u001b[39m\u001b[22m\n\n    Unexpected Execution Error: {\"response\":{\"errors\":[{\"message\":\"Unexpected Execution Error\",\"locations\":[{\"line\":3,\"column\":11}],\"path\":[\"flow\"]}],\"data\":{\"flow\":null},\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetFlow($id: UUID!) {\\n          flow(id: $id) {\\n            id\\n            title\\n            steps {\\n              id\\n              title\\n              order\\n              components {\\n                id\\n                title\\n                componentType\\n                order\\n              }\\n            }\\n          }\\n        }\\n      \",\"variables\":{\"id\":\"f58b691e-4077-4161-80f6-9626305eb352\"}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 20 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(query\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'query'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { query\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeQuery (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:20:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/08-designer-onboarding-simple.test.js\u001b[39m\u001b[0m\u001b[2m:477:24)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m🎨 Онбординг дизайнера - Упрощенный сценарий › 6. 📊 Проверка созданного потока › Получить полную информацию о созданном потоке\u001b[39m\u001b[22m\n\n    The field `estimatedDurationMinutes` does not exist on the type `FlowStepComponentDetails`.: {\"response\":{\"errors\":[{\"message\":\"The field `estimatedDurationMinutes` does not exist on the type `FlowStepComponentDetails`.\",\"locations\":[{\"line\":21,\"column\":17}],\"path\":[\"flow\",\"steps\",\"components\"],\"extensions\":{\"type\":\"FlowStepComponentDetails\",\"field\":\"estimatedDurationMinutes\",\"responseName\":\"estimatedDurationMinutes\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetFlow($id: UUID!) {\\n          flow(id: $id) {\\n            id\\n            title\\n            description\\n            status\\n            totalSteps\\n            steps {\\n              id\\n              title\\n              description\\n              order\\n              totalComponents\\n              components {\\n                id\\n                title\\n                componentType\\n                order\\n                isRequired\\n                estimatedDurationMinutes\\n              }\\n            }\\n          }\\n        }\\n      \",\"variables\":{\"id\":\"f58b691e-4077-4161-80f6-9626305eb352\"}}}\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 20 |\u001b[39m       response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mclient\u001b[33m.\u001b[39mrequest(query\u001b[33m,\u001b[39m variables)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m       \u001b[36mconst\u001b[39m duration \u001b[33m=\u001b[39m \u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow() \u001b[33m-\u001b[39m startTime\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m       global\u001b[33m.\u001b[39mlogApiCall(\u001b[32m'query'\u001b[39m\u001b[33m,\u001b[39m operationName\u001b[33m,\u001b[39m { query\u001b[33m,\u001b[39m variables }\u001b[33m,\u001b[39m response\u001b[33m,\u001b[39m duration)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat makeRequest (\u001b[22m\u001b[2mnode_modules/graphql-request/src/index.ts\u001b[2m:426:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat LaufGraphQLClient.executeQuery (\u001b[22m\u001b[2mlib/graphql-client.js\u001b[2m:20:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/08-designer-onboarding-simple.test.js\u001b[39m\u001b[0m\u001b[2m:544:24)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["🎨 Онбординг дизайнера - Упрощенный сценарий","1. 🚀 Создание потока обучения"],"duration":149,"failureMessages":[],"fullName":"🎨 Онбординг дизайнера - Упрощенный сценарий 1. 🚀 Создание потока обучения Создать поток \"Онбординг нового дизайнера\"","status":"passed","title":"Создать поток \"Онбординг нового дизайнера\""},{"ancestorTitles":["🎨 Онбординг дизайнера - Упрощенный сценарий","2. 📋 Создание шагов потока"],"duration":65,"failureMessages":[],"fullName":"🎨 Онбординг дизайнера - Упрощенный сценарий 2. 📋 Создание шагов потока Создать первый шаг: \"Знакомство с структурой компании\"","status":"passed","title":"Создать первый шаг: \"Знакомство с структурой компании\""},{"ancestorTitles":["🎨 Онбординг дизайнера - Упрощенный сценарий","2. 📋 Создание шагов потока"],"duration":10,"failureMessages":[],"fullName":"🎨 Онбординг дизайнера - Упрощенный сценарий 2. 📋 Создание шагов потока Создать второй шаг: \"Техническое обеспечение и поддержка\"","status":"passed","title":"Создать второй шаг: \"Техническое обеспечение и поддержка\""},{"ancestorTitles":["🎨 Онбординг дизайнера - Упрощенный сценарий","3. 📝 Добавление компонентов в первый шаг"],"duration":59,"failureMessages":[],"fullName":"🎨 Онбординг дизайнера - Упрощенный сценарий 3. 📝 Добавление компонентов в первый шаг Добавить компонент статьи: \"Структура и ценности компании\"","status":"passed","title":"Добавить компонент статьи: \"Структура и ценности компании\""},{"ancestorTitles":["🎨 Онбординг дизайнера - Упрощенный сценарий","3. 📝 Добавление компонентов в первый шаг"],"duration":35,"failureMessages":["Error: Не удалось создать компонент: {\"response\":{\"errors\":[{\"message\":\"Не удалось создать компонент\"}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        mutation CreateComponent($input: CreateComponentInput!) {\\n          createComponent(input: $input) {\\n            quiz {\\n              isSuccess\\n              message\\n              componentId\\n              linkId\\n              component {\\n                id\\n                title\\n                description\\n                questionText\\n                options {\\n                  id\\n                  text\\n                  isCorrect\\n                  message\\n                  points\\n                }\\n              }\\n            }\\n          }\\n        }\\n      \",\"variables\":{\"input\":{\"quiz\":{\"flowStepId\":\"2b8c8eb7-d64a-4cd1-84ff-85270bad29d7\",\"title\":\"Проверка знаний о компании\",\"description\":\"Тест для проверки понимания структуры компании и её ценностей\",\"questionText\":\"Какая из перечисленных ценностей НЕ является основной ценностью нашей компании?\",\"options\":[{\"text\":\"Пользователь в центре\",\"isCorrect\":false,\"message\":\"Это одна из наших ключевых ценностей!\",\"points\":0},{\"text\":\"Максимизация прибыли любой ценой\",\"isCorrect\":true,\"message\":\"Правильно! Мы ставим качество и пользователей выше краткосрочной прибыли.\",\"points\":25},{\"text\":\"Качество превыше всего\",\"isCorrect\":false,\"message\":\"Это одна из наших основных ценностей.\",\"points\":0},{\"text\":\"Непрерывное обучение\",\"isCorrect\":false,\"message\":\"Мы действительно ценим постоянное развитие.\",\"points\":0}],\"isRequired\":true,\"estimatedDurationMinutes\":5}}}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeMutation (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:40:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/08-designer-onboarding-simple.test.js:292:24)"],"fullName":"🎨 Онбординг дизайнера - Упрощенный сценарий 3. 📝 Добавление компонентов в первый шаг Добавить компонент квиза: \"Проверка знаний о компании\"","status":"failed","title":"Добавить компонент квиза: \"Проверка знаний о компании\""},{"ancestorTitles":["🎨 Онбординг дизайнера - Упрощенный сценарий","3. 📝 Добавление компонентов в первый шаг"],"duration":24,"failureMessages":[],"fullName":"🎨 Онбординг дизайнера - Упрощенный сценарий 3. 📝 Добавление компонентов в первый шаг Добавить компонент задания: \"Знакомство с командой\"","status":"passed","title":"Добавить компонент задания: \"Знакомство с командой\""},{"ancestorTitles":["🎨 Онбординг дизайнера - Упрощенный сценарий","4. ⚙️ Добавление компонентов во второй шаг"],"duration":7,"failureMessages":[],"fullName":"🎨 Онбординг дизайнера - Упрощенный сценарий 4. ⚙️ Добавление компонентов во второй шаг Добавить статью: \"Техническая настройка рабочего места\"","status":"passed","title":"Добавить статью: \"Техническая настройка рабочего места\""},{"ancestorTitles":["🎨 Онбординг дизайнера - Упрощенный сценарий","4. ⚙️ Добавление компонентов во второй шаг"],"duration":16,"failureMessages":[],"fullName":"🎨 Онбординг дизайнера - Упрощенный сценарий 4. ⚙️ Добавление компонентов во второй шаг Добавить задание: \"Получение технических доступов\"","status":"passed","title":"Добавить задание: \"Получение технических доступов\""},{"ancestorTitles":["🎨 Онбординг дизайнера - Упрощенный сценарий","5. 🔄 Изменение порядка компонентов"],"duration":17,"failureMessages":["Error: Unexpected Execution Error: {\"response\":{\"errors\":[{\"message\":\"Unexpected Execution Error\",\"locations\":[{\"line\":3,\"column\":11}],\"path\":[\"flow\"]}],\"data\":{\"flow\":null},\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetFlow($id: UUID!) {\\n          flow(id: $id) {\\n            id\\n            title\\n            steps {\\n              id\\n              title\\n              order\\n              components {\\n                id\\n                title\\n                componentType\\n                order\\n              }\\n            }\\n          }\\n        }\\n      \",\"variables\":{\"id\":\"f58b691e-4077-4161-80f6-9626305eb352\"}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeQuery (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:20:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/08-designer-onboarding-simple.test.js:477:24)"],"fullName":"🎨 Онбординг дизайнера - Упрощенный сценарий 5. 🔄 Изменение порядка компонентов Переместить компоненты для оптимального порядка обучения","status":"failed","title":"Переместить компоненты для оптимального порядка обучения"},{"ancestorTitles":["🎨 Онбординг дизайнера - Упрощенный сценарий","6. 📊 Проверка созданного потока"],"duration":3,"failureMessages":["Error: The field `estimatedDurationMinutes` does not exist on the type `FlowStepComponentDetails`.: {\"response\":{\"errors\":[{\"message\":\"The field `estimatedDurationMinutes` does not exist on the type `FlowStepComponentDetails`.\",\"locations\":[{\"line\":21,\"column\":17}],\"path\":[\"flow\",\"steps\",\"components\"],\"extensions\":{\"type\":\"FlowStepComponentDetails\",\"field\":\"estimatedDurationMinutes\",\"responseName\":\"estimatedDurationMinutes\",\"specifiedBy\":\"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}],\"status\":200,\"headers\":{}},\"request\":{\"query\":\"\\n        query GetFlow($id: UUID!) {\\n          flow(id: $id) {\\n            id\\n            title\\n            description\\n            status\\n            totalSteps\\n            steps {\\n              id\\n              title\\n              description\\n              order\\n              totalComponents\\n              components {\\n                id\\n                title\\n                componentType\\n                order\\n                isRequired\\n                estimatedDurationMinutes\\n              }\\n            }\\n          }\\n        }\\n      \",\"variables\":{\"id\":\"f58b691e-4077-4161-80f6-9626305eb352\"}}}\n    at makeRequest (/Users/tsekh/Documents/bbmozg/api_test/node_modules/graphql-request/src/index.ts:426:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at LaufGraphQLClient.executeQuery (/Users/tsekh/Documents/bbmozg/api_test/lib/graphql-client.js:20:18)\n    at Object.<anonymous> (/Users/tsekh/Documents/bbmozg/api_test/tests/08-designer-onboarding-simple.test.js:544:24)"],"fullName":"🎨 Онбординг дизайнера - Упрощенный сценарий 6. 📊 Проверка созданного потока Получить полную информацию о созданном потоке","status":"failed","title":"Получить полную информацию о созданном потоке"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":false,"collectCoverageFrom":["**/*.{js,ts}","!**/node_modules/**","!**/reports/**"],"coverageDirectory":"/Users/tsekh/Documents/bbmozg/api_test/coverage","coverageProvider":"babel","coverageReporters":["json","text","lcov","clover"],"detectLeaks":false,"detectOpenHandles":true,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":true,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":9,"noStackTrace":false,"nonFlagArgs":[],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["/Users/tsekh/Documents/bbmozg/api_test/node_modules/jest-html-reporters/index.js",{"publicPath":"./reports","filename":"test-report.html","expand":true,"hideIcon":false,"pageTitle":"Lauf API E2E Test Report","logoImgPath":"","includeFailureMsg":true,"includeSuiteFailure":true}]],"rootDir":"/Users/tsekh/Documents/bbmozg/api_test","runTestsByPath":false,"seed":1379169785,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPattern":"","testSequencer":"/Users/tsekh/Documents/bbmozg/api_test/node_modules/@jest/test-sequencer/build/index.js","testTimeout":30000,"updateSnapshot":"new","useStderr":false,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false},"endTime":1750977378003,"_reporterOptions":{"publicPath":"./reports","filename":"test-report.html","expand":true,"pageTitle":"Lauf API E2E Test Report","logoImgPath":"","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false,"includeFailureMsg":true,"includeSuiteFailure":true},"logInfoMapping":{},"attachInfos":{}})