# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á—ë—Ç–æ–≤

param(
    [switch]$OpenReport = $false
)

Write-Host "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Lauf..." -ForegroundColor Green

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
Set-Location (Split-Path $PSScriptRoot -Parent)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
New-Item -ItemType Directory -Force -Path "TestResults/Coverage" | Out-Null
New-Item -ItemType Directory -Force -Path "TestResults/Reports" | Out-Null

Write-Host "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ reportgenerator..." -ForegroundColor Yellow
try {
    $null = Get-Command reportgenerator -ErrorAction Stop
} catch {
    Write-Host "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ reportgenerator..." -ForegroundColor Yellow
    dotnet tool install --global dotnet-reportgenerator-globaltool
}

Write-Host "üîß –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..." -ForegroundColor Yellow
if (Test-Path "TestResults") {
    Remove-Item -Recurse -Force "TestResults/*"
}

Write-Host "üèóÔ∏è  –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..." -ForegroundColor Yellow
dotnet build --configuration Release

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏!" -ForegroundColor Red
    exit 1
}

Write-Host "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º..." -ForegroundColor Yellow

$testProjects = @(
    "tests/Lauf.Shared.Tests/Lauf.Shared.Tests.csproj",
    "tests/Lauf.Domain.Tests/Lauf.Domain.Tests.csproj",
    "tests/Lauf.Application.Tests/Lauf.Application.Tests.csproj",
    "tests/Lauf.Infrastructure.Tests/Lauf.Infrastructure.Tests.csproj",
    "tests/Lauf.Api.Tests/Lauf.Api.Tests.csproj"
)

$testNames = @("shared", "domain", "application", "infrastructure", "api")

for ($i = 0; $i -lt $testProjects.Length; $i++) {
    $project = $testProjects[$i]
    $name = $testNames[$i]
    
    if (Test-Path $project) {
        Write-Host "  ‚ñ∂Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ $name..." -ForegroundColor Cyan
        
        dotnet test $project `
            --configuration Release `
            --no-build `
            --logger "trx;LogFileName=$name-tests.trx" `
            --collect:"XPlat Code Coverage" `
            --results-directory TestResults/
            
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ö†Ô∏è  –¢–µ—Å—Ç—ã $name –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç $project –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Yellow
    }
}

Write-Host "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á—ë—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è..." -ForegroundColor Yellow

$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π HTML –æ—Ç—á—ë—Ç
reportgenerator `
    "-reports:TestResults/**/coverage.cobertura.xml" `
    "-targetdir:TestResults/Reports" `
    "-reporttypes:Html;HtmlSummary;Badges;TextSummary;JsonSummary" `
    "-title:Lauf - Code Coverage Report" `
    "-tag:$timestamp" `
    "-historydir:TestResults/History"

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ –û—Ç—á—ë—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!" -ForegroundColor Green
} else {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤" -ForegroundColor Red
}

Write-Host ""
Write-Host "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:" -ForegroundColor Green
Write-Host "   üìä HTML –æ—Ç—á—ë—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: TestResults/Reports/index.html" -ForegroundColor White
Write-Host "   üß™ –§–∞–π–ª—ã —Ç–µ—Å—Ç–æ–≤: TestResults/*.trx" -ForegroundColor White
Write-Host "   üìÅ –í—Å–µ —Ñ–∞–π–ª—ã: TestResults/" -ForegroundColor White

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ–∫—Ä—ã—Ç–∏—è
if (Test-Path "TestResults/Reports/Summary.txt") {
    Write-Host ""
    Write-Host "üìä –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è:" -ForegroundColor Green
    Get-Content "TestResults/Reports/Summary.txt"
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º JSON —Å–≤–æ–¥–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
if (Test-Path "TestResults/Reports/Summary.json") {
    try {
        $summary = Get-Content "TestResults/Reports/Summary.json" | ConvertFrom-Json
        Write-Host ""
        Write-Host "üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è:" -ForegroundColor Green
        Write-Host "   –ü–æ–∫—Ä—ã—Ç–∏–µ –ª–∏–Ω–∏–π: $($summary.summary.linecoverage)%" -ForegroundColor White
        Write-Host "   –ü–æ–∫—Ä—ã—Ç–∏–µ –≤–µ—Ç–æ–∫: $($summary.summary.branchcoverage)%" -ForegroundColor White
        Write-Host "   –ü–æ–∫—Ä—ã–≤–∞–µ–º—ã–µ –ª–∏–Ω–∏–∏: $($summary.summary.coveredlines) –∏–∑ $($summary.summary.coverablelines)" -ForegroundColor White
    } catch {
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
    }
}

if ($OpenReport) {
    Write-Host ""
    Write-Host "üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç—á—ë—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ..." -ForegroundColor Yellow
    if (Test-Path "TestResults/Reports/index.html") {
        Start-Process "TestResults/Reports/index.html"
    }
}