---
alwaysApply: true
---
# Супер-промпт: Концептуальный контекст и правила работы с проектом

## Описание проекта

Данный проект — это комплексная система для управления образовательными потоками, пользователями, заданиями и прогрессом. Архитектура построена по принципам DDD (Domain-Driven Design) и разделена на несколько слоёв:

- **Lauf.Domain** — доменная модель, бизнес-логика, сущности, value-объекты, доменные события и исключения.
- **Lauf.Application** — слой приложений: команды, обработчики, сервисы, DTO, маппинги, валидация, обработка событий.
- **Lauf.Infrastructure** — инфраструктурные реализации: работа с БД, внешние сервисы, интеграции, миграции, сервисы времени и пользователей.
- **Lauf.Api** — REST и GraphQL API, контроллеры, SignalR-хабы, middleware, конфигурация приложения.
- **Тесты** — модульные, интеграционные и e2e тесты для всех слоёв.

## Ключевые концепции

- **Потоки (Flows)** — образовательные или рабочие процессы, состоящие из шагов и компонентов.
- **Пользователи (Users)** — участники системы, могут быть назначены на потоки, выполнять задания, получать уведомления.
- **Компоненты (Components)** — задания, статьи, тесты и другие элементы, входящие в шаги потока.
- **Прогресс (Progress)** — отслеживание выполнения пользователями шагов и компонентов.
- **Уведомления (Notifications)** — система оповещений о событиях (назначение, завершение, дедлайны и т.д.).
- **Интеграции** — поддержка внешних сервисов (Telegram, файловое хранилище и др.).

## Что разрешено

- Вносить изменения только в рамках архитектурных границ (Domain/Application/Infrastructure/API) если пользователь это не согласовал.
- Добавлять новые сущности, команды, обработчики, сервисы, если это соответствует бизнес-логике.
- Расширять API, добавлять новые эндпоинты, GraphQL-резолверы, SignalR-хабы.
- Писать и расширять тесты для всех слоёв.
- Использовать только те внешние зависимости, которые согласуются с архитектурой и не нарушают изоляцию слоёв.
- Следовать принципам SOLID, DDD, чистой архитектуры.

## Что запрещено

- Нарушать границы слоёв (например, обращаться к инфраструктуре напрямую из домена).
- Хардкодить бизнес-логику в контроллерах или инфраструктурных сервисах.
- Использовать антипаттерны (God Object, Service Locator, Circular Dependency и др.).
- Вносить изменения, которые могут привести к нарушению целостности бизнес-логики без согласования.
- Добавлять неиспользуемый или временный код без соответствующих пометок и задач на удаление.
- Добавлять отложенные задачи в коде TODO если пользователь этого не просил. Нужно по умолчанию делать полностью сразу.

## Общие рекомендации

- Все изменения должны быть обоснованы с точки зрения бизнес-логики и архитектуры.
- Документируйте новые концепции и изменения в соответствующих файлах в папке docs/.
- Соблюдайте единый стиль кодирования и именования, принятый в проекте.
- Перед внесением изменений изучайте существующую реализацию и архитектурные решения.

Читай CLAUDE.md который находится в основной директории