using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System.Text;
using System.Text.Json;
using Lauf.Domain.Entities.Notifications;
using Lauf.Domain.Enums;

namespace Lauf.Infrastructure.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
/// </summary>
public class TelegramNotificationService
{
    private readonly HttpClient _httpClient;
    private readonly IConfiguration _configuration;
    private readonly ILogger<TelegramNotificationService> _logger;
    private readonly string _botToken;

    public TelegramNotificationService(
        HttpClient httpClient,
        IConfiguration configuration,
        ILogger<TelegramNotificationService> logger)
    {
        _httpClient = httpClient;
        _configuration = configuration;
        _logger = logger;
        _botToken = _configuration.GetSection("TelegramBot")["Token"] ?? "";
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    /// </summary>
    /// <param name="notification">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</param>
    /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã</param>
    /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏</returns>
    public async Task<NotificationSendResult> SendNotificationAsync(
        Notification notification, 
        CancellationToken cancellationToken = default)
    {
        try
        {
            if (string.IsNullOrEmpty(_botToken))
            {
                return NotificationSendResult.Failed("Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            }

            // –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var telegramId = notification.User.TelegramUserId.Value;
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            var message = FormatMessage(notification);
            
            // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            var replyMarkup = CreateInlineKeyboard(notification);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            var success = await SendTelegramMessage(telegramId, message, replyMarkup, cancellationToken);
            
            if (success)
            {
                _logger.LogInformation(
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {NotificationId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {UserId} –≤ Telegram",
                    notification.Id, notification.UserId);
                
                return NotificationSendResult.Success();
            }
            else
            {
                return NotificationSendResult.Failed("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram API");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex,
                "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {NotificationId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {UserId}",
                notification.Id, notification.UserId);
            
            return NotificationSendResult.Failed(ex.Message);
        }
    }

    /// <summary>
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    /// </summary>
    private string FormatMessage(Notification notification)
    {
        var emoji = GetEmojiByType(notification.Type);
        var priority = GetPriorityText(notification.Priority);
        
        var message = new StringBuilder();
        message.AppendLine($"{emoji} *{notification.Title}*");
        message.AppendLine();
        message.AppendLine(notification.Content);
        
        if (notification.Priority >= NotificationPriority.High)
        {
            message.AppendLine();
            message.AppendLine($"üîî {priority}");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (!string.IsNullOrEmpty("{}"))
        {
            try
            {
                var metadata = JsonSerializer.Deserialize<Dictionary<string, object>>("{}");
                if (metadata?.ContainsKey("deadline") == true)
                {
                    message.AppendLine();
                    message.AppendLine($"‚è∞ –î–µ–¥–ª–∞–π–Ω: {metadata["deadline"]}");
                }
            }
            catch
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            }
        }

        return message.ToString();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    /// </summary>
    private object? CreateInlineKeyboard(Notification notification)
    {
        var buttons = new List<List<object>>();

        switch (notification.Type)
        {
            case NotificationType.FlowAssigned:
                buttons.Add(new List<object>
                {
                    new { text = "üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data = $"start_flow_{notification.RelatedEntityId}" },
                    new { text = "üìÖ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data = $"postpone_flow_{notification.RelatedEntityId}" }
                });
                break;

            case NotificationType.DeadlineReminder:
                buttons.Add(new List<object>
                {
                    new { text = "üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data = $"continue_flow_{notification.RelatedEntityId}" },
                    new { text = "‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ", callback_data = $"remind_later_{notification.RelatedEntityId}" }
                });
                break;

            case NotificationType.AchievementUnlocked:
                buttons.Add(new List<object>
                {
                    new { text = "üéâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data = $"view_achievements_{notification.UserId}" }
                });
                break;

            case NotificationType.StepCompleted:
            case NotificationType.ComponentCompleted:
                buttons.Add(new List<object>
                {
                    new { text = "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥", callback_data = $"next_step_{notification.RelatedEntityId}" },
                    new { text = "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data = $"view_progress_{notification.UserId}" }
                });
                break;
        }

        // –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        buttons.Add(new List<object>
        {
            new { text = "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", callback_data = $"mark_read_{notification.Id}" }
        });

        return buttons.Any() ? new { inline_keyboard = buttons } : null;
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
    /// </summary>
    private async Task<bool> SendTelegramMessage(
        long chatId, 
        string message, 
        object? replyMarkup,
        CancellationToken cancellationToken)
    {
        try
        {
            var url = $"https://api.telegram.org/bot{_botToken}/sendMessage";
            
            var payload = new
            {
                chat_id = chatId,
                text = message,
                parse_mode = "Markdown",
                reply_markup = replyMarkup
            };

            var json = JsonSerializer.Serialize(payload);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await _httpClient.PostAsync(url, content, cancellationToken);
            
            if (response.IsSuccessStatusCode)
            {
                return true;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync(cancellationToken);
                _logger.LogWarning(
                    "Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {StatusCode}: {Error}",
                    response.StatusCode, errorContent);
                return false;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram API");
            return false;
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    /// </summary>
    private string GetEmojiByType(NotificationType type)
    {
        return type switch
        {
            NotificationType.FlowAssigned => "üìö",
            NotificationType.DeadlineReminder => "‚è∞",
            NotificationType.DeadlineApproaching => "‚ö†Ô∏è",
            NotificationType.DeadlineOverdue => "üö®",
            NotificationType.ComponentCompleted => "‚úÖ",
            NotificationType.StepCompleted => "üéØ",
            NotificationType.FlowCompleted => "üèÜ",
            NotificationType.StepUnlocked => "üîì",
            NotificationType.AchievementEarned => "üèÖ",
            NotificationType.AchievementUnlocked => "üèÜ",
            NotificationType.SystemNotification => "üîî",
            NotificationType.BuddyMessage => "üë•",
            _ => "üì¢"
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    /// </summary>
    private string GetPriorityText(NotificationPriority priority)
    {
        return priority switch
        {
            NotificationPriority.Critical => "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ",
            NotificationPriority.High => "–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            NotificationPriority.Medium => "–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            NotificationPriority.Low => "–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            _ => ""
        };
    }
}

/// <summary>
/// –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/// </summary>
public class NotificationSendResult
{
    public bool IsSuccess { get; private set; }
    public string? ErrorMessage { get; private set; }

    private NotificationSendResult(bool isSuccess, string? errorMessage = null)
    {
        IsSuccess = isSuccess;
        ErrorMessage = errorMessage;
    }

    public static NotificationSendResult Success() => new(true);
    public static NotificationSendResult Failed(string errorMessage) => new(false, errorMessage);
}