using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Lauf.Domain.Interfaces.Services;
using Lauf.Domain.Interfaces.Repositories;
using Lauf.Infrastructure.ExternalServices.Configurations;

namespace Lauf.Infrastructure.ExternalServices.TelegramBot;

/// <summary>
/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram Bot webhook'–æ–≤
/// </summary>
public class TelegramWebhookHandler
{
    private readonly ILogger<TelegramWebhookHandler> _logger;
    private readonly ITelegramBotClient _botClient;
    private readonly IUserRepository _userRepository;
    private readonly INotificationService _notificationService;
    private readonly TelegramConfiguration _telegramConfig;

    public TelegramWebhookHandler(
        ILogger<TelegramWebhookHandler> logger,
        ITelegramBotClient botClient,
        IUserRepository userRepository,
        INotificationService notificationService,
        IOptions<TelegramConfiguration> telegramConfig)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _botClient = botClient ?? throw new ArgumentNullException(nameof(botClient));
        _userRepository = userRepository ?? throw new ArgumentNullException(nameof(userRepository));
        _notificationService = notificationService ?? throw new ArgumentNullException(nameof(notificationService));
        _telegramConfig = telegramConfig.Value ?? throw new ArgumentNullException(nameof(telegramConfig));
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
    /// </summary>
    /// <param name="update">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram</param>
    /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã</param>
    public async Task HandleUpdateAsync(Update update, CancellationToken cancellationToken = default)
    {
        try
        {
            _logger.LogInformation("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram: {UpdateType}", update.Type);

            switch (update.Type)
            {
                case UpdateType.Message:
                    await HandleMessageAsync(update.Message!, cancellationToken);
                    break;

                case UpdateType.CallbackQuery:
                    await HandleCallbackQueryAsync(update.CallbackQuery!, cancellationToken);
                    break;

                default:
                    _logger.LogDebug("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {UpdateType}", update.Type);
                    break;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    /// </summary>
    private async Task HandleMessageAsync(Message message, CancellationToken cancellationToken)
    {
        if (message.From == null || message.Text == null)
            return;

        var telegramUserId = message.From.Id;
        var messageText = message.Text.Trim();

        _logger.LogInformation(
            "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TelegramUserId}: {MessageText}",
            telegramUserId,
            messageText);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (messageText.StartsWith('/'))
        {
            await HandleCommandAsync(message, messageText, cancellationToken);
        }
        else
        {
            await HandleTextMessageAsync(message, messageText, cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    /// </summary>
    private async Task HandleCommandAsync(Message message, string command, CancellationToken cancellationToken)
    {
        var telegramUserId = message.From!.Id;

        switch (command.ToLower())
        {
            case "/start":
                await HandleStartCommandAsync(message, cancellationToken);
                break;

            case "/help":
                await HandleHelpCommandAsync(message, cancellationToken);
                break;

            case "/progress":
                await HandleProgressCommandAsync(telegramUserId, message.Chat.Id, cancellationToken);
                break;

            case "/pause":
                await HandlePauseCommandAsync(telegramUserId, message.Chat.Id, cancellationToken);
                break;

            case "/resume":
                await HandleResumeCommandAsync(telegramUserId, message.Chat.Id, cancellationToken);
                break;

            default:
                await SendUnknownCommandMessageAsync(message.Chat.Id, cancellationToken);
                break;
        }
    }

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ /start
    /// </summary>
    private async Task HandleStartCommandAsync(Message message, CancellationToken cancellationToken)
    {
        var welcomeText = $"""
            üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Lauf!
            
            –≠—Ç–æ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
            
            üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            /help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
            /progress - –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
            /pause - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            /resume - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
            –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–∫—Ä–æ–π—Ç–µ Web App:
            """;

        await _botClient.SendTextMessageAsync(
            message.Chat.Id,
            welcomeText,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ /help
    /// </summary>
    private async Task HandleHelpCommandAsync(Message message, CancellationToken cancellationToken)
    {
        var helpText = """
            üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º Lauf Bot:

            üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
            /progress - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
            /pause - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Ç–æ–∫–∞—Ö
            /resume - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

            üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
            ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö –æ–±—É—á–µ–Ω–∏—è
            ‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
            ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏

            üéØ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Web App.
            """;

        await _botClient.SendTextMessageAsync(
            message.Chat.Id,
            helpText,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ /progress
    /// </summary>
    private async Task HandleProgressCommandAsync(long telegramUserId, long chatId, CancellationToken cancellationToken)
    {
        try
        {
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            var user = await _userRepository.GetByTelegramIdAsync(new Domain.ValueObjects.TelegramUserId(telegramUserId), cancellationToken);
            if (user == null)
            {
                await _botClient.SendTextMessageAsync(
                    chatId,
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.",
                    cancellationToken: cancellationToken);
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            var progressText = """
                üìà –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è:
                
                üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏: 2
                ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏: 1
                ‚è±Ô∏è –í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è: 12 —á–∞—Å–æ–≤
                üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: 3
                
                –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ Web App.
                """;

            await _botClient.SendTextMessageAsync(
                chatId,
                progressText,
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TelegramUserId}", telegramUserId);
            await _botClient.SendTextMessageAsync(
                chatId,
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ /pause - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    /// </summary>
    private async Task HandlePauseCommandAsync(long telegramUserId, long chatId, CancellationToken cancellationToken)
    {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await _botClient.SendTextMessageAsync(
            chatId,
            "‚è∏Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resume –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.",
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ /resume - –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    /// </summary>
    private async Task HandleResumeCommandAsync(long telegramUserId, long chatId, CancellationToken cancellationToken)
    {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await _botClient.SendTextMessageAsync(
            chatId,
            "‚ñ∂Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    /// </summary>
    private async Task HandleTextMessageAsync(Message message, string text, CancellationToken cancellationToken)
    {
        // –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await _botClient.SendTextMessageAsync(
            message.Chat.Id,
            "ü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (inline –∫–Ω–æ–ø–∫–∏)
    /// </summary>
    private async Task HandleCallbackQueryAsync(CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        if (callbackQuery.Data == null || callbackQuery.Message == null)
            return;

        _logger.LogInformation(
            "–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TelegramUserId}: {CallbackData}",
            callbackQuery.From.Id,
            callbackQuery.Data);

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
        await _botClient.AnswerCallbackQueryAsync(
            callbackQuery.Id,
            cancellationToken: cancellationToken);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã callback'–æ–≤
        switch (callbackQuery.Data)
        {
            case var data when data.StartsWith("start_flow_"):
                await HandleStartFlowCallbackAsync(callbackQuery, data, cancellationToken);
                break;

            case var data when data.StartsWith("pause_flow_"):
                await HandlePauseFlowCallbackAsync(callbackQuery, data, cancellationToken);
                break;

            case var data when data.StartsWith("view_achievement_"):
                await HandleViewAchievementCallbackAsync(callbackQuery, data, cancellationToken);
                break;

            default:
                _logger.LogWarning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {CallbackData}", callbackQuery.Data);
                break;
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–∞ –Ω–∞—á–∞–ª–∞ –ø–æ—Ç–æ–∫–∞
    /// </summary>
    private async Task HandleStartFlowCallbackAsync(CallbackQuery callbackQuery, string callbackData, CancellationToken cancellationToken)
    {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Ç–æ–∫–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        var flowId = callbackData.Replace("start_flow_", "");

        await _botClient.SendTextMessageAsync(
            callbackQuery.Message!.Chat.Id,
            $"üöÄ –ü–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω! –û—Ç–∫—Ä–æ–π—Ç–µ Web App –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è.",
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–∞ –ø–∞—É–∑—ã –ø–æ—Ç–æ–∫–∞
    /// </summary>
    private async Task HandlePauseFlowCallbackAsync(CallbackQuery callbackQuery, string callbackData, CancellationToken cancellationToken)
    {
        var flowId = callbackData.Replace("pause_flow_", "");

        await _botClient.SendTextMessageAsync(
            callbackQuery.Message!.Chat.Id,
            "‚è∏Ô∏è –ü–æ—Ç–æ–∫ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    /// </summary>
    private async Task HandleViewAchievementCallbackAsync(CallbackQuery callbackQuery, string callbackData, CancellationToken cancellationToken)
    {
        var achievementId = callbackData.Replace("view_achievement_", "");

        await _botClient.SendTextMessageAsync(
            callbackQuery.Message!.Chat.Id,
            "üèÜ –û—Ç–∫—Ä–æ–π—Ç–µ Web App –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!",
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
    /// </summary>
    private async Task SendUnknownCommandMessageAsync(long chatId, CancellationToken cancellationToken)
    {
        await _botClient.SendTextMessageAsync(
            chatId,
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            cancellationToken: cancellationToken);
    }
} 