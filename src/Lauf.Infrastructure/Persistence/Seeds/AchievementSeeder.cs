using Microsoft.EntityFrameworkCore;
using Lauf.Domain.Entities.Users;
using Lauf.Domain.Enums;

namespace Lauf.Infrastructure.Persistence.Seeds;

/// <summary>
/// Seeder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ
/// </summary>
public static class AchievementSeeder
{
    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    /// </summary>
    /// <param name="context">–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</param>
    public static async Task SeedAsync(ApplicationDbContext context)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ
        if (await context.Achievements.AnyAsync())
        {
            return; // –î–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å
        }

        var achievements = new List<Achievement>
        {
            // –ë–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            new Achievement
            {
                Id = Guid.NewGuid(),
                Title = "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
                Description = "–ó–∞–≤–µ—Ä—à–∏–ª–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–æ—Ç–æ–∫ –æ–±—É—á–µ–Ω–∏—è",
                Rarity = AchievementRarity.Common,
                IconUrl = "üéØ",
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            },
            new Achievement
            {
                Id = Guid.NewGuid(),
                Title = "–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç",
                Description = "–ó–∞–≤–µ—Ä—à–∏–ª–∏ 3 –ø–æ—Ç–æ–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é",
                Rarity = AchievementRarity.Rare,
                IconUrl = "‚ö°",
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            },
            new Achievement
            {
                Id = Guid.NewGuid(),
                Title = "–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å",
                Description = "–û–±—É—á–∞–ª–∏—Å—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π",
                Rarity = AchievementRarity.Rare,
                IconUrl = "üí™",
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            },
            new Achievement
            {
                Id = Guid.NewGuid(),
                Title = "–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü",
                Description = "–ü–æ—Ç—Ä–∞—Ç–∏–ª–∏ –±–æ–ª–µ–µ 100 —á–∞—Å–æ–≤ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ",
                Rarity = AchievementRarity.Epic,
                IconUrl = "üèÉ‚Äç‚ôÇÔ∏è",
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            },
            new Achievement
            {
                Id = Guid.NewGuid(),
                Title = "–ò–¥–µ–∞–ª—å–Ω—ã–π —É—á–µ–Ω–∏–∫",
                Description = "–î–æ—Å—Ç–∏–≥–ª–∏ 95%+ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –≤—Å–µ–º –ø–æ—Ç–æ–∫–∞–º",
                Rarity = AchievementRarity.Legendary,
                IconUrl = "üåü",
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            },

            // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            new Achievement
            {
                Id = Guid.NewGuid(),
                Title = "–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫",
                Description = "–ê–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è",
                Rarity = AchievementRarity.Rare,
                IconUrl = "ü§ù",
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            },
            new Achievement
            {
                Id = Guid.NewGuid(),
                Title = "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫",
                Description = "–ü–æ–º–æ–≥–ª–∏ 5 –Ω–æ–≤–∏—á–∫–∞–º –≤ –∏—Ö –ø–µ—Ä–≤—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö –æ–±—É—á–µ–Ω–∏—è",
                Rarity = AchievementRarity.Rare,
                IconUrl = "üë®‚Äçüè´",
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            },

            // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            new Achievement
            {
                Id = Guid.NewGuid(),
                Title = "–≠–∫—Å–ø–µ—Ä—Ç",
                Description = "–ó–∞–≤–µ—Ä—à–∏–ª–∏ 10 –ø–æ—Ç–æ–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è —Å –æ—Ç–ª–∏—á–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏",
                Rarity = AchievementRarity.Epic,
                IconUrl = "üéì",
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            },
            new Achievement
            {
                Id = Guid.NewGuid(),
                Title = "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
                Description = "–ò–∑—É—á–∏–ª–∏ 20 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è",
                Rarity = AchievementRarity.Rare,
                IconUrl = "üîç",
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            },
            new Achievement
            {
                Id = Guid.NewGuid(),
                Title = "–ù–æ–≤–∞—Ç–æ—Ä",
                Description = "–ü—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤–Ω–µ–¥—Ä–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É",
                Rarity = AchievementRarity.Legendary,
                IconUrl = "üí°",
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            },

            // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            new Achievement
            {
                Id = Guid.NewGuid(),
                Title = "–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞",
                Description = "–ù–∞—á–∏–Ω–∞–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –¥–æ 8:00 —É—Ç—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏",
                Rarity = AchievementRarity.Rare,
                IconUrl = "üåÖ",
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            },
            new Achievement
            {
                Id = Guid.NewGuid(),
                Title = "–ü–æ–ª—É–Ω–æ—á–Ω–∏–∫",
                Description = "–û–±—É—á–∞–ª–∏—Å—å –ø–æ—Å–ª–µ 22:00 –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏",
                Rarity = AchievementRarity.Rare,
                IconUrl = "üåô",
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            },

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            new Achievement
            {
                Id = Guid.NewGuid(),
                Title = "–ë–µ–∑—É–ø—Ä–µ—á–Ω–æ—Å—Ç—å",
                Description = "–ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ—Ç–æ–∫ –±–µ–∑ –µ–¥–∏–Ω–æ–π –æ—à–∏–±–∫–∏",
                Rarity = AchievementRarity.Epic,
                IconUrl = "üíé",
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            },
            new Achievement
            {
                Id = Guid.NewGuid(),
                Title = "–ú–æ–ª–Ω–∏—è",
                Description = "–ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ—Ç–æ–∫ –≤ —Ä–µ–∫–æ—Ä–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏",
                Rarity = AchievementRarity.Rare,
                IconUrl = "‚ö°",
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            },
            new Achievement
            {
                Id = Guid.NewGuid(),
                Title = "–õ–µ–≥–µ–Ω–¥–∞",
                Description = "–ü–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                Rarity = AchievementRarity.Legendary,
                IconUrl = "üëë",
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            }
        };

        await context.Achievements.AddRangeAsync(achievements);
        await context.SaveChangesAsync();
    }
} 