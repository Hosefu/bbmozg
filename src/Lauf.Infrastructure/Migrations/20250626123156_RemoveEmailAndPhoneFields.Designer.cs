// <auto-generated />
using System;
using Lauf.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lauf.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250626123156_RemoveEmailAndPhoneFields")]
    partial class RemoveEmailAndPhoneFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.Flow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Status");

                    b.HasIndex("Title");

                    b.ToTable("Flows", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminNotes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AssignedById")
                        .HasColumnType("uuid");

                    b.Property<int>("AttemptCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("BuddyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CompletedSteps")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FinalScore")
                        .HasColumnType("integer");

                    b.Property<Guid>("FlowId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FlowSnapshotId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastActivityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PauseReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PausedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("ProgressPercent")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Assigned");

                    b.Property<int>("TotalSteps")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserFeedback")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("UserRating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignedById");

                    b.HasIndex("BuddyId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DueDate");

                    b.HasIndex("FlowId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId", "FlowId");

                    b.ToTable("FlowAssignments", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowPause")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowSelfPaced")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutoAssignBuddy")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomSettings")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DaysToComplete")
                        .HasColumnType("integer");

                    b.Property<bool>("ExcludeHolidays")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExcludeWeekends")
                        .HasColumnType("boolean");

                    b.Property<int>("FinalReminderDaysBefore")
                        .HasColumnType("integer");

                    b.Property<int>("FirstReminderDaysBefore")
                        .HasColumnType("integer");

                    b.Property<Guid>("FlowId")
                        .HasColumnType("uuid");

                    b.Property<int?>("MaxAttempts")
                        .HasColumnType("integer");

                    b.Property<int?>("MinPassingScorePercent")
                        .HasColumnType("integer");

                    b.Property<bool>("RequiresBuddy")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendDailyProgress")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendDeadlineReminders")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendStepCompletionNotifications")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FlowId")
                        .IsUnique();

                    b.ToTable("FlowSettings");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstimatedDurationMinutes")
                        .HasColumnType("integer");

                    b.Property<Guid>("FlowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.ToTable("FlowSteps");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowStepComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<int>("ComponentType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstimatedDurationMinutes")
                        .HasColumnType("integer");

                    b.Property<Guid>("FlowStepId")
                        .HasColumnType("uuid");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxAttempts")
                        .HasColumnType("integer");

                    b.Property<int?>("MinPassingScore")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FlowStepId");

                    b.ToTable("FlowStepComponents");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AttemptCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Channel")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("MaxAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3);

                    b.Property<string>("Metadata")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RelatedEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Notifications_CreatedAt");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_Notifications_Priority");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Notifications_Type");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Notifications_UserId");

                    b.HasIndex("RelatedEntityType", "RelatedEntityId")
                        .HasDatabaseName("IX_Notifications_RelatedEntity");

                    b.HasIndex("Status", "ScheduledAt")
                        .HasDatabaseName("IX_Notifications_Status_ScheduledAt");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.ComponentProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AttemptsCount")
                        .HasColumnType("integer");

                    b.Property<int?>("BestScore")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ComponentSnapshotId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<int?>("LastScore")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("StepProgressId")
                        .HasColumnType("uuid");

                    b.Property<int>("TimeSpentMinutes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComponentSnapshotId");

                    b.HasIndex("StepProgressId");

                    b.ToTable("ComponentProgress");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.FlowProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CompletedComponentsCount")
                        .HasColumnType("integer");

                    b.Property<int>("CompletedStepsCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CurrentStepId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FlowAssignmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FlowSnapshotId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TimeSpentMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("TotalComponentsCount")
                        .HasColumnType("integer");

                    b.Property<int>("TotalStepsCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserProgressId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FlowAssignmentId");

                    b.HasIndex("FlowSnapshotId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserProgressId");

                    b.ToTable("FlowProgress");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.StepProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CompletedComponentsCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("FlowProgressId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsUnlocked")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StepSnapshotId")
                        .HasColumnType("uuid");

                    b.Property<int>("TimeSpentMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("TotalComponentsCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FlowProgressId");

                    b.HasIndex("StepSnapshotId");

                    b.ToTable("StepProgress");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.UserProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AchievementsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ActiveFlowsCount")
                        .HasColumnType("integer");

                    b.Property<int>("AssignedFlowsCount")
                        .HasColumnType("integer");

                    b.Property<int>("CompletedFlowsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastActivityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OverdueFlowsCount")
                        .HasColumnType("integer");

                    b.Property<int>("TotalLearningTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserProgress");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Snapshots.ComponentSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstimatedMinutes")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxAttempts")
                        .HasColumnType("integer");

                    b.Property<int?>("MinimumScore")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("OriginalComponentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StepSnapshotId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StepSnapshotId");

                    b.ToTable("ComponentSnapshots");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Snapshots.FlowSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstimatedHours")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OriginalFlowId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<int>("WorkingDaysToComplete")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FlowSnapshots");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Snapshots.FlowStepSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstimatedMinutes")
                        .HasColumnType("integer");

                    b.Property<Guid>("FlowSnapshotId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("OriginalStepId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RequiresSequentialCompletion")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FlowSnapshotId");

                    b.ToTable("FlowStepSnapshots");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("Rarity");

                    b.HasIndex("Title");

                    b.ToTable("Achievements", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastActiveAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("TelegramUsername")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.UserAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EarnedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("EarnedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "AchievementId")
                        .IsUnique();

                    b.ToTable("UserAchievements", (string)null);
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowAssignment", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.User", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Users.User", "Buddy")
                        .WithMany()
                        .HasForeignKey("BuddyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Lauf.Domain.Entities.Flows.Flow", "Flow")
                        .WithMany("Assignments")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Users.User", "User")
                        .WithMany("FlowAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedBy");

                    b.Navigation("Buddy");

                    b.Navigation("Flow");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowSettings", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Flows.Flow", "Flow")
                        .WithOne("Settings")
                        .HasForeignKey("Lauf.Domain.Entities.Flows.FlowSettings", "FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowStep", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Flows.Flow", "Flow")
                        .WithMany("Steps")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowStepComponent", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Flows.FlowStep", "FlowStep")
                        .WithMany("Components")
                        .HasForeignKey("FlowStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlowStep");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.ComponentProgress", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Snapshots.ComponentSnapshot", "ComponentSnapshot")
                        .WithMany()
                        .HasForeignKey("ComponentSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Progress.StepProgress", "StepProgress")
                        .WithMany("ComponentProgresses")
                        .HasForeignKey("StepProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentSnapshot");

                    b.Navigation("StepProgress");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.FlowProgress", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Flows.FlowAssignment", "FlowAssignment")
                        .WithMany()
                        .HasForeignKey("FlowAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Snapshots.FlowSnapshot", "FlowSnapshot")
                        .WithMany()
                        .HasForeignKey("FlowSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Progress.UserProgress", null)
                        .WithMany("FlowProgresses")
                        .HasForeignKey("UserProgressId");

                    b.Navigation("FlowAssignment");

                    b.Navigation("FlowSnapshot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.StepProgress", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Progress.FlowProgress", "FlowProgress")
                        .WithMany("StepProgresses")
                        .HasForeignKey("FlowProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Snapshots.FlowStepSnapshot", "StepSnapshot")
                        .WithMany()
                        .HasForeignKey("StepSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlowProgress");

                    b.Navigation("StepSnapshot");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.UserProgress", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Snapshots.ComponentSnapshot", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Snapshots.FlowStepSnapshot", "StepSnapshot")
                        .WithMany("Components")
                        .HasForeignKey("StepSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StepSnapshot");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Snapshots.FlowStepSnapshot", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Snapshots.FlowSnapshot", "FlowSnapshot")
                        .WithMany("Steps")
                        .HasForeignKey("FlowSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlowSnapshot");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.User", b =>
                {
                    b.OwnsOne("Lauf.Domain.ValueObjects.TelegramUserId", "TelegramUserId", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<long>("Value")
                                .HasColumnType("bigint")
                                .HasColumnName("TelegramUserId");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Users_TelegramUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("TelegramUserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.UserAchievement", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.Flow", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowStep", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.FlowProgress", b =>
                {
                    b.Navigation("StepProgresses");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.StepProgress", b =>
                {
                    b.Navigation("ComponentProgresses");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.UserProgress", b =>
                {
                    b.Navigation("FlowProgresses");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Snapshots.FlowSnapshot", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Snapshots.FlowStepSnapshot", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("FlowAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
