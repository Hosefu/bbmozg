// <auto-generated />
using System;
using Lauf.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lauf.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250629211250_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("FlowAssignmentBuddies", b =>
                {
                    b.Property<Guid>("BuddiesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FlowAssignmentId")
                        .HasColumnType("TEXT");

                    b.HasKey("BuddiesId", "FlowAssignmentId");

                    b.HasIndex("FlowAssignmentId");

                    b.ToTable("FlowAssignmentBuddies");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.ComponentBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FlowStepId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FlowStepId");

                    b.ToTable("Components", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuizQuestionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuizQuestionId");

                    b.ToTable("QuestionOptions", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.QuizQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuizComponentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Order");

                    b.HasIndex("QuizComponentId");

                    b.ToTable("QuizQuestions", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.Flow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ActiveContentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActiveContentId")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.ToTable("Flows", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssignedBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FlowContentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FlowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Assigned");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignedAt");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("FlowContentId");

                    b.HasIndex("FlowId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId", "FlowId");

                    b.ToTable("FlowAssignments", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowAssignmentProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AttemptCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CompletedSteps")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int?>("FinalScore")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FlowAssignmentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastActivityAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PauseReason")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PausedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProgressPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalSteps")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("UserFeedback")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserRating")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FlowAssignmentId")
                        .IsUnique()
                        .HasDatabaseName("IX_FlowAssignmentProgress_FlowAssignmentId");

                    b.ToTable("FlowAssignmentProgress", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FlowId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FlowId");

                    b.ToTable("FlowContents");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowSelfPause")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowSelfRestart")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DaysPerStep")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FlowId")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("ReminderInterval")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequireSequentialCompletionComponents")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SendCompletionNotification")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SendProgressReminders")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SendStartNotification")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FlowId")
                        .IsUnique();

                    b.ToTable("FlowSettings");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FlowContentId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FlowContentId");

                    b.ToTable("FlowSteps");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AttemptCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Channel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("RelatedEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelatedEntityType")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Pending");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.UserProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AchievementsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveFlowsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignedFlowsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompletedFlowsCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastActivityAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("OverdueFlowsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalLearningTimeMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserProgress");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("Rarity");

                    b.HasIndex("Title");

                    b.ToTable("Achievements", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastActiveAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TelegramUsername")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.UserAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EarnedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("EarnedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "AchievementId")
                        .IsUnique();

                    b.ToTable("UserAchievements", (string)null);
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.ArticleComponent", b =>
                {
                    b.HasBaseType("Lauf.Domain.Entities.Components.ComponentBase");

                    b.ToTable("ArticleComponents", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.QuizComponent", b =>
                {
                    b.HasBaseType("Lauf.Domain.Entities.Components.ComponentBase");

                    b.Property<bool>("AllowMultipleAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShuffleOptions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("INTEGER");

                    b.ToTable("QuizComponents", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.TaskComponent", b =>
                {
                    b.HasBaseType("Lauf.Domain.Entities.Components.ComponentBase");

                    b.Property<string>("CodeWord")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCaseSensitive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.ToTable("TaskComponents", (string)null);
                });

            modelBuilder.Entity("FlowAssignmentBuddies", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("BuddiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Flows.FlowAssignment", null)
                        .WithMany()
                        .HasForeignKey("FlowAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.ComponentBase", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Flows.FlowStep", null)
                        .WithMany("Components")
                        .HasForeignKey("FlowStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.QuestionOption", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Components.QuizQuestion", "QuizQuestion")
                        .WithMany("Options")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizQuestion");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.QuizQuestion", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Components.QuizComponent", "QuizComponent")
                        .WithMany("Questions")
                        .HasForeignKey("QuizComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizComponent");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.Flow", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Flows.FlowContent", "ActiveContent")
                        .WithOne()
                        .HasForeignKey("Lauf.Domain.Entities.Flows.Flow", "ActiveContentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Lauf.Domain.Entities.Users.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActiveContent");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowAssignment", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.User", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Flows.FlowContent", "FlowContent")
                        .WithMany("Assignments")
                        .HasForeignKey("FlowContentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Flows.Flow", "Flow")
                        .WithMany("Assignments")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Users.User", "User")
                        .WithMany("FlowAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedByUser");

                    b.Navigation("Flow");

                    b.Navigation("FlowContent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowAssignmentProgress", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Flows.FlowAssignment", "FlowAssignment")
                        .WithOne("Progress")
                        .HasForeignKey("Lauf.Domain.Entities.Flows.FlowAssignmentProgress", "FlowAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlowAssignment");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowContent", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Flows.Flow", "Flow")
                        .WithMany("Contents")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowSettings", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Flows.Flow", "Flow")
                        .WithOne("Settings")
                        .HasForeignKey("Lauf.Domain.Entities.Flows.FlowSettings", "FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowStep", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Flows.FlowContent", "FlowContent")
                        .WithMany("Steps")
                        .HasForeignKey("FlowContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlowContent");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.UserProgress", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.User", b =>
                {
                    b.OwnsOne("Lauf.Domain.ValueObjects.TelegramUserId", "TelegramUserId", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("TEXT");

                            b1.Property<long>("Value")
                                .HasColumnType("INTEGER")
                                .HasColumnName("TelegramUserId");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Users_TelegramUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("TelegramUserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.UserAchievement", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.ArticleComponent", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Components.ComponentBase", null)
                        .WithOne()
                        .HasForeignKey("Lauf.Domain.Entities.Components.ArticleComponent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.QuizComponent", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Components.ComponentBase", null)
                        .WithOne()
                        .HasForeignKey("Lauf.Domain.Entities.Components.QuizComponent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.TaskComponent", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Components.ComponentBase", null)
                        .WithOne()
                        .HasForeignKey("Lauf.Domain.Entities.Components.TaskComponent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.QuizQuestion", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.Flow", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Contents");

                    b.Navigation("Settings")
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowAssignment", b =>
                {
                    b.Navigation("Progress")
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowContent", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowStep", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("FlowAssignments");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.QuizComponent", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
