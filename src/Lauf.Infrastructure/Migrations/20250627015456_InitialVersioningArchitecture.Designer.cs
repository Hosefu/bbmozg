// <auto-generated />
using System;
using Lauf.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lauf.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250627015456_InitialVersioningArchitecture")]
    partial class InitialVersioningArchitecture
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Lauf.Domain.Entities.Components.ComponentBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("EstimatedDurationMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(15);

                    b.Property<Guid>("FlowStepId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<int?>("MaxAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinPassingScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Draft");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FlowStepId");

                    b.HasIndex("Order");

                    b.HasIndex("Status");

                    b.HasIndex("Title");

                    b.ToTable("Components", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<Guid?>("QuizComponentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsCorrect")
                        .HasDatabaseName("IX_QuestionOptions_IsCorrect");

                    b.HasIndex("Order")
                        .HasDatabaseName("IX_QuestionOptions_Order");

                    b.HasIndex("QuizComponentId");

                    b.ToTable("QuestionOptions", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.Flow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Draft");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Status");

                    b.HasIndex("Title");

                    b.ToTable("Flows", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdminNotes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssignedById")
                        .HasColumnType("TEXT");

                    b.Property<int>("AttemptCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("BuddyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CompletedSteps")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FinalScore")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FlowId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FlowVersionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastActivityAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OriginalFlowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PauseReason")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PausedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgressPercent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Assigned");

                    b.Property<int>("TotalSteps")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserFeedback")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserRating")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssignedById");

                    b.HasIndex("BuddyId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DueDate");

                    b.HasIndex("FlowId");

                    b.HasIndex("FlowVersionId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId", "FlowId");

                    b.ToTable("FlowAssignments", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowPause")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowSelfPaced")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoAssignBuddy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("DaysToComplete")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExcludeHolidays")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExcludeWeekends")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FinalReminderDaysBefore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FirstReminderDaysBefore")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FlowId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresBuddy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SendDailyProgress")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SendDeadlineReminders")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SendStepCompletionNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FlowId")
                        .IsUnique();

                    b.ToTable("FlowSettings");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EstimatedDurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FlowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.ToTable("FlowSteps");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AttemptCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("Channel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.Property<string>("Metadata")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RelatedEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Notifications_CreatedAt");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_Notifications_Priority");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Notifications_Type");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Notifications_UserId");

                    b.HasIndex("RelatedEntityType", "RelatedEntityId")
                        .HasDatabaseName("IX_Notifications_RelatedEntity");

                    b.HasIndex("Status", "ScheduledAt")
                        .HasDatabaseName("IX_Notifications_Status_ScheduledAt");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.ComponentProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AttemptsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BestScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ComponentVersionId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StepProgressId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeSpentMinutes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ComponentVersionId");

                    b.HasIndex("StepProgressId");

                    b.ToTable("ComponentProgress");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.FlowProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CompletedComponentsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompletedStepsCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("CurrentStepId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FlowAssignmentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FlowVersionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeSpentMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalComponentsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalStepsCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserProgressId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FlowAssignmentId");

                    b.HasIndex("FlowVersionId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserProgressId");

                    b.ToTable("FlowProgress");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.StepProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CompletedComponentsCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FlowProgressId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsUnlocked")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StepVersionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeSpentMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalComponentsCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FlowProgressId");

                    b.HasIndex("StepVersionId");

                    b.ToTable("StepProgress");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.UserProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AchievementsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveFlowsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignedFlowsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompletedFlowsCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastActivityAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("OverdueFlowsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalLearningTimeMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserProgress");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("Rarity");

                    b.HasIndex("Title");

                    b.ToTable("Achievements", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastActiveAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelegramUsername")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.UserAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EarnedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("EarnedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "AchievementId")
                        .IsUnique();

                    b.ToTable("UserAchievements", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.ArticleComponentVersion", b =>
                {
                    b.Property<Guid>("ComponentVersionId")
                        .HasColumnType("TEXT")
                        .HasComment("Идентификатор версии компонента");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Содержимое статьи в формате Markdown");

                    b.Property<int>("ReadingTimeMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(15)
                        .HasComment("Время чтения статьи в минутах");

                    b.HasKey("ComponentVersionId");

                    b.HasIndex("ReadingTimeMinutes")
                        .HasDatabaseName("IX_ArticleComponentVersions_ReadingTime");

                    b.ToTable("ArticleComponentVersions", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.ComponentVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Тип компонента");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasComment("Дата создания версии");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("Описание компонента");

                    b.Property<int>("EstimatedDurationMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(15)
                        .HasComment("Оценочное время выполнения в минутах");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("")
                        .HasComment("Инструкции для компонента");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("Является ли версия активной");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasComment("Является ли компонент обязательным");

                    b.Property<int?>("MaxAttempts")
                        .HasColumnType("INTEGER")
                        .HasComment("Максимальное количество попыток");

                    b.Property<int?>("MinPassingScore")
                        .HasColumnType("INTEGER")
                        .HasComment("Минимальный проходной балл");

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("Порядок компонента (LexoRank)");

                    b.Property<Guid>("OriginalId")
                        .HasColumnType("TEXT")
                        .HasComment("Идентификатор оригинального компонента");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Draft")
                        .HasComment("Статус компонента");

                    b.Property<Guid>("StepVersionId")
                        .HasColumnType("TEXT")
                        .HasComment("Идентификатор версии этапа");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Название компонента");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasComment("Дата последнего обновления версии");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER")
                        .HasComment("Номер версии");

                    b.HasKey("Id");

                    b.HasIndex("ComponentType")
                        .HasDatabaseName("IX_ComponentVersions_ComponentType");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ComponentVersions_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_ComponentVersions_Active")
                        .HasFilter("IsActive = 1");

                    b.HasIndex("Order")
                        .HasDatabaseName("IX_ComponentVersions_Order");

                    b.HasIndex("OriginalId")
                        .HasDatabaseName("IX_ComponentVersions_OriginalId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ComponentVersions_Status");

                    b.HasIndex("StepVersionId")
                        .HasDatabaseName("IX_ComponentVersions_StepVersionId");

                    b.HasIndex("Version")
                        .HasDatabaseName("IX_ComponentVersions_Version");

                    b.HasIndex("OriginalId", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_ComponentVersions_OriginalId_Active")
                        .HasFilter("IsActive = 1");

                    b.HasIndex("OriginalId", "Version")
                        .IsUnique()
                        .HasDatabaseName("IX_ComponentVersions_OriginalId_Version");

                    b.ToTable("ComponentVersions", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.FlowStepVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasComment("Дата создания версии");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("Описание этапа");

                    b.Property<int>("EstimatedDurationMinutes")
                        .HasColumnType("INTEGER")
                        .HasComment("Оценочное время выполнения в минутах");

                    b.Property<Guid>("FlowVersionId")
                        .HasColumnType("TEXT")
                        .HasComment("Идентификатор версии потока");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("")
                        .HasComment("Инструкции для этапа");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("Является ли версия активной");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasComment("Является ли этап обязательным");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("")
                        .HasComment("Заметки по этапу");

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("Порядок этапа (LexoRank)");

                    b.Property<Guid>("OriginalId")
                        .HasColumnType("TEXT")
                        .HasComment("Идентификатор оригинального этапа");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasComment("Статус этапа");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Название этапа");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasComment("Дата последнего обновления версии");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER")
                        .HasComment("Номер версии");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_FlowStepVersions_CreatedAt");

                    b.HasIndex("FlowVersionId")
                        .HasDatabaseName("IX_FlowStepVersions_FlowVersionId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_FlowStepVersions_Active")
                        .HasFilter("IsActive = 1");

                    b.HasIndex("Order")
                        .HasDatabaseName("IX_FlowStepVersions_Order");

                    b.HasIndex("OriginalId")
                        .HasDatabaseName("IX_FlowStepVersions_OriginalId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_FlowStepVersions_Status");

                    b.HasIndex("Version")
                        .HasDatabaseName("IX_FlowStepVersions_Version");

                    b.HasIndex("OriginalId", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_FlowStepVersions_OriginalId_Active")
                        .HasFilter("IsActive = 1");

                    b.HasIndex("OriginalId", "Version")
                        .IsUnique()
                        .HasDatabaseName("IX_FlowStepVersions_OriginalId_Version");

                    b.ToTable("FlowStepVersions", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.FlowVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasComment("Дата создания версии");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("TEXT")
                        .HasComment("Идентификатор создателя");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("Описание потока");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("Является ли версия активной");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER")
                        .HasComment("Является ли поток обязательным");

                    b.Property<Guid>("OriginalId")
                        .HasColumnType("TEXT")
                        .HasComment("Идентификатор оригинального потока");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER")
                        .HasComment("Приоритет потока");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("TEXT")
                        .HasComment("Дата публикации (если опубликован)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Draft")
                        .HasComment("Статус потока");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("")
                        .HasComment("Теги потока (разделенные запятыми)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Название потока");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasComment("Дата последнего обновления версии");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER")
                        .HasComment("Номер версии");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_FlowVersions_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_FlowVersions_Active")
                        .HasFilter("IsActive = 1");

                    b.HasIndex("OriginalId")
                        .HasDatabaseName("IX_FlowVersions_OriginalId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_FlowVersions_Status");

                    b.HasIndex("Version")
                        .HasDatabaseName("IX_FlowVersions_Version");

                    b.HasIndex("OriginalId", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_FlowVersions_OriginalId_Active")
                        .HasFilter("IsActive = 1");

                    b.HasIndex("OriginalId", "Version")
                        .IsUnique()
                        .HasDatabaseName("IX_FlowVersions_OriginalId_Version");

                    b.ToTable("FlowVersions", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.QuizComponentVersion", b =>
                {
                    b.Property<Guid>("ComponentVersionId")
                        .HasColumnType("TEXT")
                        .HasComment("Идентификатор версии компонента");

                    b.Property<bool>("AllowMultipleAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasComment("Разрешены ли множественные попытки");

                    b.Property<int>("PassingScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(80)
                        .HasComment("Проходной балл (в процентах)");

                    b.Property<bool>("ShowCorrectAnswers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasComment("Показывать ли правильные ответы после завершения");

                    b.Property<bool>("ShuffleAnswers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("Перемешивать ли варианты ответов");

                    b.Property<bool>("ShuffleQuestions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("Перемешивать ли вопросы");

                    b.Property<int?>("TimeLimitMinutes")
                        .HasColumnType("INTEGER")
                        .HasComment("Ограничение по времени в минутах");

                    b.HasKey("ComponentVersionId");

                    b.HasIndex("AllowMultipleAttempts")
                        .HasDatabaseName("IX_QuizComponentVersions_MultipleAttempts");

                    b.HasIndex("PassingScore")
                        .HasDatabaseName("IX_QuizComponentVersions_PassingScore");

                    b.HasIndex("TimeLimitMinutes")
                        .HasDatabaseName("IX_QuizComponentVersions_TimeLimit");

                    b.ToTable("QuizComponentVersions", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.QuizOptionVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Explanation")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("Объяснение ответа");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER")
                        .HasComment("Является ли ответ правильным");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER")
                        .HasComment("Порядковый номер варианта ответа");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasComment("Количество баллов за этот ответ");

                    b.Property<Guid>("QuizVersionId")
                        .HasColumnType("TEXT")
                        .HasComment("Идентификатор версии квиза");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("Текст варианта ответа");

                    b.HasKey("Id");

                    b.HasIndex("IsCorrect")
                        .HasDatabaseName("IX_QuizOptionVersions_IsCorrect");

                    b.HasIndex("Points")
                        .HasDatabaseName("IX_QuizOptionVersions_Points");

                    b.HasIndex("QuizVersionId")
                        .HasDatabaseName("IX_QuizOptionVersions_QuizVersionId");

                    b.HasIndex("QuizVersionId", "Order")
                        .IsUnique()
                        .HasDatabaseName("IX_QuizOptionVersions_QuizVersionId_Order");

                    b.ToTable("QuizOptionVersions", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.TaskComponentVersion", b =>
                {
                    b.Property<Guid>("ComponentVersionId")
                        .HasColumnType("TEXT")
                        .HasComment("Идентификатор версии компонента");

                    b.Property<string>("AllowedFileTypes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Разрешенные типы файлов");

                    b.Property<string>("AutoApprovalKeywords")
                        .HasColumnType("TEXT")
                        .HasComment("Ключевые слова для автоматического одобрения");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Подробные инструкции по выполнению задания");

                    b.Property<int?>("MaxFileSize")
                        .HasColumnType("INTEGER")
                        .HasComment("Максимальный размер файла в байтах");

                    b.Property<bool>("RequiresMentorApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasComment("Требуется ли одобрение наставника");

                    b.Property<string>("SubmissionType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Text")
                        .HasComment("Тип отправки результата");

                    b.HasKey("ComponentVersionId");

                    b.HasIndex("MaxFileSize")
                        .HasDatabaseName("IX_TaskComponentVersions_MaxFileSize");

                    b.HasIndex("RequiresMentorApproval")
                        .HasDatabaseName("IX_TaskComponentVersions_RequiresMentorApproval");

                    b.HasIndex("SubmissionType")
                        .HasDatabaseName("IX_TaskComponentVersions_SubmissionType");

                    b.ToTable("TaskComponentVersions", (string)null);
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.ArticleComponent", b =>
                {
                    b.HasBaseType("Lauf.Domain.Entities.Components.ComponentBase");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReadingTimeMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(15);

                    b.HasIndex("ReadingTimeMinutes")
                        .HasDatabaseName("IX_ArticleComponents_ReadingTimeMinutes");

                    b.ToTable("ArticleComponents", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.QuizComponent", b =>
                {
                    b.HasBaseType("Lauf.Domain.Entities.Components.ComponentBase");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasIndex("QuestionText")
                        .HasDatabaseName("IX_QuizComponents_QuestionText");

                    b.ToTable("QuizComponents", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.TaskComponent", b =>
                {
                    b.HasBaseType("Lauf.Domain.Entities.Components.ComponentBase");

                    b.Property<string>("CodeWord")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Hint")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.HasIndex("CodeWord")
                        .HasDatabaseName("IX_TaskComponents_CodeWord");

                    b.ToTable("TaskComponents", (string)null);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.ComponentBase", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Flows.FlowStep", null)
                        .WithMany("Components")
                        .HasForeignKey("FlowStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.QuestionOption", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Components.QuizComponent", null)
                        .WithMany("Options")
                        .HasForeignKey("QuizComponentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowAssignment", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.User", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Users.User", "Buddy")
                        .WithMany()
                        .HasForeignKey("BuddyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Lauf.Domain.Entities.Flows.Flow", "Flow")
                        .WithMany("Assignments")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Versions.FlowVersion", "FlowVersion")
                        .WithMany("Assignments")
                        .HasForeignKey("FlowVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Users.User", "User")
                        .WithMany("FlowAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedBy");

                    b.Navigation("Buddy");

                    b.Navigation("Flow");

                    b.Navigation("FlowVersion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowSettings", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Flows.Flow", "Flow")
                        .WithOne("Settings")
                        .HasForeignKey("Lauf.Domain.Entities.Flows.FlowSettings", "FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowStep", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Flows.Flow", "Flow")
                        .WithMany("Steps")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.ComponentProgress", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Versions.ComponentVersion", "ComponentVersion")
                        .WithMany()
                        .HasForeignKey("ComponentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Progress.StepProgress", "StepProgress")
                        .WithMany("ComponentProgresses")
                        .HasForeignKey("StepProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentVersion");

                    b.Navigation("StepProgress");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.FlowProgress", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Flows.FlowAssignment", "FlowAssignment")
                        .WithMany()
                        .HasForeignKey("FlowAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Versions.FlowVersion", "FlowVersion")
                        .WithMany()
                        .HasForeignKey("FlowVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Progress.UserProgress", null)
                        .WithMany("FlowProgresses")
                        .HasForeignKey("UserProgressId");

                    b.Navigation("FlowAssignment");

                    b.Navigation("FlowVersion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.StepProgress", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Progress.FlowProgress", "FlowProgress")
                        .WithMany("StepProgresses")
                        .HasForeignKey("FlowProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Versions.FlowStepVersion", "StepVersion")
                        .WithMany()
                        .HasForeignKey("StepVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlowProgress");

                    b.Navigation("StepVersion");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.UserProgress", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.User", b =>
                {
                    b.OwnsOne("Lauf.Domain.ValueObjects.TelegramUserId", "TelegramUserId", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("TEXT");

                            b1.Property<long>("Value")
                                .HasColumnType("INTEGER")
                                .HasColumnName("TelegramUserId");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Users_TelegramUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("TelegramUserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.UserAchievement", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.ArticleComponentVersion", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Versions.ComponentVersion", "ComponentVersion")
                        .WithOne("ArticleVersion")
                        .HasForeignKey("Lauf.Domain.Entities.Versions.ArticleComponentVersion", "ComponentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentVersion");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.ComponentVersion", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Versions.FlowStepVersion", "StepVersion")
                        .WithMany("ComponentVersions")
                        .HasForeignKey("StepVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StepVersion");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.FlowStepVersion", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Versions.FlowVersion", "FlowVersion")
                        .WithMany("StepVersions")
                        .HasForeignKey("FlowVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlowVersion");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.QuizComponentVersion", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Versions.ComponentVersion", "ComponentVersion")
                        .WithOne("QuizVersion")
                        .HasForeignKey("Lauf.Domain.Entities.Versions.QuizComponentVersion", "ComponentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentVersion");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.QuizOptionVersion", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Versions.QuizComponentVersion", "QuizVersion")
                        .WithMany("Options")
                        .HasForeignKey("QuizVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizVersion");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.TaskComponentVersion", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Versions.ComponentVersion", "ComponentVersion")
                        .WithOne("TaskVersion")
                        .HasForeignKey("Lauf.Domain.Entities.Versions.TaskComponentVersion", "ComponentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentVersion");
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lauf.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.ArticleComponent", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Components.ComponentBase", null)
                        .WithOne()
                        .HasForeignKey("Lauf.Domain.Entities.Components.ArticleComponent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.QuizComponent", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Components.ComponentBase", null)
                        .WithOne()
                        .HasForeignKey("Lauf.Domain.Entities.Components.QuizComponent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.TaskComponent", b =>
                {
                    b.HasOne("Lauf.Domain.Entities.Components.ComponentBase", null)
                        .WithOne()
                        .HasForeignKey("Lauf.Domain.Entities.Components.TaskComponent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.Flow", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Flows.FlowStep", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.FlowProgress", b =>
                {
                    b.Navigation("StepProgresses");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.StepProgress", b =>
                {
                    b.Navigation("ComponentProgresses");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Progress.UserProgress", b =>
                {
                    b.Navigation("FlowProgresses");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("FlowAssignments");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.ComponentVersion", b =>
                {
                    b.Navigation("ArticleVersion");

                    b.Navigation("QuizVersion");

                    b.Navigation("TaskVersion");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.FlowStepVersion", b =>
                {
                    b.Navigation("ComponentVersions");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.FlowVersion", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("StepVersions");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Versions.QuizComponentVersion", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Lauf.Domain.Entities.Components.QuizComponent", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
