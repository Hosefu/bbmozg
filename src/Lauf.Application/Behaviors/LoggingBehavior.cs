using MediatR;
using Microsoft.Extensions.Logging;
using System.Diagnostics;
using System.Text.Json;
using System.Reflection;

namespace Lauf.Application.Behaviors;

/// <summary>
/// Behavior –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤
/// </summary>
/// <typeparam name="TRequest">–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞</typeparam>
/// <typeparam name="TResponse">–¢–∏–ø –æ—Ç–≤–µ—Ç–∞</typeparam>
public class LoggingBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse>
    where TRequest : IRequest<TResponse>
{
    private readonly ILogger<LoggingBehavior<TRequest, TResponse>> _logger;

    public LoggingBehavior(ILogger<LoggingBehavior<TRequest, TResponse>> logger)
    {
        _logger = logger;
    }

    public async Task<TResponse> Handle(TRequest request, RequestHandlerDelegate<TResponse> next, CancellationToken cancellationToken)
    {
        var requestName = typeof(TRequest).Name;
        var requestId = Guid.NewGuid().ToString("N")[..8];
        var stopwatch = Stopwatch.StartNew();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –∏–∫–æ–Ω–∫—É
        var operationType = GetOperationType(requestName);
        var icon = GetOperationIcon(operationType);

        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
        _logger.LogInformation(
            "{Icon} [MED-{RequestId}] START {OperationType}: {RequestName} | Handler: {HandlerName}",
            icon, requestId, operationType, requestName, GetHandlerName(requestName));

        // –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ)
        LogRequestParameters(request, requestId);

        try
        {
            var response = await next();
            
            stopwatch.Stop();
            
            // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            _logger.LogInformation(
                "‚úÖ [MED-{RequestId}] SUCCESS {OperationType}: {RequestName} –∑–∞ {ElapsedMs}ms",
                requestId, operationType, requestName, stopwatch.ElapsedMilliseconds);

            // –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            if (stopwatch.ElapsedMilliseconds > 1000)
            {
                _logger.LogWarning(
                    "üêå [MED-{RequestId}] –ú–ï–î–õ–ï–ù–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø: {RequestName} –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å {ElapsedMs}ms",
                    requestId, requestName, stopwatch.ElapsedMilliseconds);
            }

            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –±–æ–ª—å—à–æ–π –æ–±—ä–µ–∫—Ç)
            LogResponseResult(response, requestId, operationType);

            return response;
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            _logger.LogError(ex, 
                "üö® [MED-{RequestId}] ERROR {OperationType}: {RequestName} –∑–∞ {ElapsedMs}ms | –û—à–∏–±–∫–∞: {ErrorMessage}", 
                requestId, operationType, requestName, stopwatch.ElapsedMilliseconds, ex.Message);
            throw;
        }
    }

    private void LogRequestParameters(TRequest request, string requestId)
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
            var requestType = typeof(TRequest);
            var properties = requestType.GetProperties(BindingFlags.Public | BindingFlags.Instance);

            if (properties.Length > 0 && properties.Length <= 10) // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            {
                var parameters = new Dictionary<string, object?>();
                
                foreach (var prop in properties)
                {
                    try
                    {
                        var value = prop.GetValue(request);
                        if (value != null && !IsComplexType(prop.PropertyType))
                        {
                            parameters[prop.Name] = value;
                        }
                        else if (value != null)
                        {
                            parameters[prop.Name] = $"[{prop.PropertyType.Name}]";
                        }
                    }
                    catch
                    {
                        parameters[prop.Name] = "[Error reading value]";
                    }
                }

                if (parameters.Any())
                {
                    var parametersJson = JsonSerializer.Serialize(parameters, new JsonSerializerOptions 
                    { 
                        WriteIndented = false,
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                    });
                    
                    _logger.LogDebug("[MED-{RequestId}] Parameters: {Parameters}", requestId, parametersJson);
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogDebug(ex, "[MED-{RequestId}] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", requestId);
        }
    }

    private void LogResponseResult(TResponse response, string requestId, string operationType)
    {
        try
        {
            if (response == null)
            {
                _logger.LogDebug("[MED-{RequestId}] Result: null", requestId);
                return;
            }

            var responseType = typeof(TResponse);
            
            // –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∏–ø–æ–≤ –ª–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            if (!IsComplexType(responseType))
            {
                _logger.LogDebug("[MED-{RequestId}] Result: {Result}", requestId, response);
            }
            // –î–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            else if (response is System.Collections.ICollection collection)
            {
                _logger.LogDebug("[MED-{RequestId}] Result: Collection with {Count} items", requestId, collection.Count);
            }
            // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –ª–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø
            else
            {
                _logger.LogDebug("[MED-{RequestId}] Result: {ResultType}", requestId, responseType.Name);
            }
        }
        catch (Exception ex)
        {
            _logger.LogDebug(ex, "[MED-{RequestId}] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", requestId);
        }
    }

    private bool IsComplexType(Type type)
    {
        return !type.IsPrimitive 
            && type != typeof(string) 
            && type != typeof(DateTime) 
            && type != typeof(DateTimeOffset)
            && type != typeof(TimeSpan)
            && type != typeof(Guid)
            && !type.IsEnum
            && Nullable.GetUnderlyingType(type) == null;
    }

    private string GetOperationType(string requestName)
    {
        if (requestName.EndsWith("Command")) return "COMMAND";
        if (requestName.EndsWith("Query")) return "QUERY";
        if (requestName.Contains("Notification")) return "EVENT";
        return "REQUEST";
    }

    private string GetOperationIcon(string operationType)
    {
        return operationType switch
        {
            "COMMAND" => "‚ö°",
            "QUERY" => "üîç",
            "EVENT" => "üì¢",
            _ => "üîÑ"
        };
    }

    private string GetHandlerName(string requestName)
    {
        // –ü—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å –∏–º—è —Ö—ç–Ω–¥–ª–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞
        if (requestName.EndsWith("Command"))
        {
            return requestName.Replace("Command", "CommandHandler");
        }
        if (requestName.EndsWith("Query"))
        {
            return requestName.Replace("Query", "QueryHandler");
        }
        return requestName + "Handler";
    }
}