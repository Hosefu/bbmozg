using Microsoft.Extensions.Logging;
using Lauf.Domain.Entities.Notifications;
using Lauf.Domain.Enums;
using Lauf.Domain.Interfaces;
using Lauf.Domain.Interfaces.Repositories;
using Lauf.Domain.Interfaces.Services;

namespace Lauf.Application.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
/// </summary>
public class NotificationService : INotificationService
{
    private readonly INotificationRepository _notificationRepository;
    // –£–±–∏—Ä–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    private readonly IUnitOfWork _unitOfWork;
    private readonly ILogger<NotificationService> _logger;

    public NotificationService(
        INotificationRepository notificationRepository,
        IUnitOfWork unitOfWork,
        ILogger<NotificationService> logger)
    {
        _notificationRepository = notificationRepository;
        _unitOfWork = unitOfWork;
        _logger = logger;
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞
    /// </summary>
    public async Task NotifyFlowAssignedAsync(
        Guid userId, 
        string flowTitle, 
        DateTime deadline,
        Guid flowAssignmentId,
        CancellationToken cancellationToken = default)
    {
        var notification = Notification.CreateFlowAssigned(userId, flowTitle, deadline, flowAssignmentId);
        
        await _notificationRepository.AddAsync(notification, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        _logger.LogInformation(
            "–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞ {FlowTitle} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {UserId}",
            flowTitle, userId);
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ
    /// </summary>
    public async Task NotifyDeadlineReminderAsync(
        Guid userId,
        string flowTitle,
        DateTime deadline,
        int daysLeft,
        Guid flowAssignmentId,
        CancellationToken cancellationToken = default)
    {
        var notification = Notification.CreateDeadlineReminder(
            userId, flowTitle, deadline, daysLeft, flowAssignmentId);
        
        await _notificationRepository.AddAsync(notification, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        _logger.LogInformation(
            "–°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ –¥–ª—è –ø–æ—Ç–æ–∫–∞ {FlowTitle}, –æ—Å—Ç–∞–ª–æ—Å—å {DaysLeft} –¥–Ω.",
            flowTitle, daysLeft);
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    /// </summary>
    public async Task NotifyAchievementUnlockedAsync(
        Guid userId,
        string achievementTitle,
        string achievementDescription,
        Guid achievementId,
        CancellationToken cancellationToken = default)
    {
        var notification = Notification.CreateAchievementUnlocked(
            userId, achievementTitle, achievementDescription, achievementId);
        
        await _notificationRepository.AddAsync(notification, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        _logger.LogInformation(
            "–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ {AchievementTitle} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}",
            achievementTitle, userId);
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    /// </summary>
    public async Task NotifyComponentCompletedAsync(
        Guid userId,
        string componentTitle,
        string flowTitle,
        Guid componentId,
        CancellationToken cancellationToken = default)
    {
        var notification = new Notification
        {
            Id = Guid.NewGuid(),
            UserId = userId,
            Type = NotificationType.ComponentCompleted,
            Channel = NotificationChannel.Telegram,
            Priority = NotificationPriority.Medium,
            Title = "‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!",
            Content = $"–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç \"{componentTitle}\" –≤ –ø–æ—Ç–æ–∫–µ \"{flowTitle}\"",
            RelatedEntityId = componentId,
            RelatedEntityType = "FlowStepComponent"
        };

        await _notificationRepository.AddAsync(notification, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        _logger.LogInformation(
            "–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {ComponentTitle} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}",
            componentTitle, userId);
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —à–∞–≥–∞
    /// </summary>
    public async Task NotifyStepUnlockedAsync(
        Guid userId,
        string stepTitle,
        string flowTitle,
        Guid stepId,
        CancellationToken cancellationToken = default)
    {
        var notification = new Notification
        {
            Id = Guid.NewGuid(),
            UserId = userId,
            Type = NotificationType.StepUnlocked,
            Channel = NotificationChannel.Telegram,
            Priority = NotificationPriority.Medium,
            Title = "üîì –ù–æ–≤—ã–π —à–∞–≥ –¥–æ—Å—Ç—É–ø–µ–Ω!",
            Content = $"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —à–∞–≥ \"{stepTitle}\" –≤ –ø–æ—Ç–æ–∫–µ \"{flowTitle}\"",
            RelatedEntityId = stepId,
            RelatedEntityType = "FlowStep"
        };

        await _notificationRepository.AddAsync(notification, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        _logger.LogInformation(
            "–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —à–∞–≥–∞ {StepTitle} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}",
            stepTitle, userId);
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    /// </summary>
    public async Task CreateCustomNotificationAsync(
        Guid userId,
        NotificationType type,
        string title,
        string content,
        NotificationPriority priority = NotificationPriority.Medium,
        DateTime? scheduledAt = null,
        string? metadata = null,
        CancellationToken cancellationToken = default)
    {
        var notification = new Notification
        {
            Id = Guid.NewGuid(),
            UserId = userId,
            Type = type,
            Channel = NotificationChannel.Telegram,
            Priority = priority,
            Title = title,
            Content = content,
            ScheduledAt = scheduledAt ?? DateTime.UtcNow,
            Metadata = metadata
        };

        await _notificationRepository.AddAsync(notification, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        _logger.LogInformation(
            "–°–æ–∑–¥–∞–Ω–æ –∫–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {Type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}",
            type, userId);
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    /// </summary>
    public async Task<int> ProcessPendingNotificationsAsync(
        int batchSize = 50,
        CancellationToken cancellationToken = default)
    {
        var pendingNotifications = await _notificationRepository.GetPendingNotificationsAsync(
            batchSize, cancellationToken);

        var processedCount = 0;

        foreach (var notification in pendingNotifications)
        {
            try
            {
                // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
                // var result = await _externalNotificationService.SendNotificationAsync(notification, cancellationToken);
                var result = new { IsSuccess = true, ErrorMessage = (string?)null };
                
                if (result.IsSuccess)
                {
                    notification.MarkAsSent();
                    processedCount++;
                }
                else
                {
                    notification.MarkAsFailed(result.ErrorMessage ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
                }

                await _notificationRepository.UpdateAsync(notification, cancellationToken);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex,
                    "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {NotificationId}",
                    notification.Id);

                notification.MarkAsFailed(ex.Message);
                await _notificationRepository.UpdateAsync(notification, cancellationToken);
            }
        }

        if (processedCount > 0)
        {
            await _unitOfWork.SaveChangesAsync(cancellationToken);
            
            _logger.LogInformation(
                "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {ProcessedCount} –∏–∑ {TotalCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                processedCount, pendingNotifications.Count);
        }

        return processedCount;
    }

    /// <summary>
    /// –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    /// </summary>
    public async Task MarkAsReadAsync(Guid notificationId, CancellationToken cancellationToken = default)
    {
        await _notificationRepository.MarkAsReadAsync(notificationId, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);
    }

    /// <summary>
    /// –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    /// </summary>
    public async Task MarkAllAsReadAsync(Guid userId, CancellationToken cancellationToken = default)
    {
        await _notificationRepository.MarkAllAsReadAsync(userId, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /// </summary>
    public async Task<IReadOnlyList<Notification>> GetUserNotificationsAsync(
        Guid userId,
        bool includeRead = false,
        int limit = 50,
        CancellationToken cancellationToken = default)
    {
        return await _notificationRepository.GetUserNotificationsAsync(
            userId, includeRead, limit, cancellationToken);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    /// </summary>
    public async Task<int> GetUnreadCountAsync(Guid userId, CancellationToken cancellationToken = default)
    {
        return await _notificationRepository.GetUnreadCountAsync(userId, cancellationToken);
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    public async Task NotifyBuddyAssignedAsync(
        Guid buddyId,
        Guid menteeId, 
        string flowTitle,
        Guid assignmentId,
        CancellationToken cancellationToken = default)
    {
        var notification = new Notification
        {
            Id = Guid.NewGuid(),
            UserId = buddyId,
            Type = NotificationType.BuddyAssigned,
            Channel = NotificationChannel.Telegram,
            Priority = NotificationPriority.High,
            Title = "üë• –ù–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π",
            Content = $"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ \"{flowTitle}\"",
            RelatedEntityId = assignmentId,
            RelatedEntityType = "FlowAssignment"
        };

        await _notificationRepository.AddAsync(notification, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);
    }

    public async Task NotifyReminderNotStartedAsync(
        Guid userId,
        string flowTitle,
        DateTime deadline,
        Guid assignmentId,
        CancellationToken cancellationToken = default)
    {
        var daysLeft = (deadline - DateTime.UtcNow).Days;
        var notification = new Notification
        {
            Id = Guid.NewGuid(),
            UserId = userId,
            Type = NotificationType.DeadlineReminder,
            Channel = NotificationChannel.Telegram,
            Priority = NotificationPriority.Medium,
            Title = "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è",
            Content = $"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ—Ç–æ–∫ \"{flowTitle}\". –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å {daysLeft} –¥–Ω–µ–π",
            RelatedEntityId = assignmentId,
            RelatedEntityType = "FlowAssignment"
        };

        await _notificationRepository.AddAsync(notification, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);
    }

    public async Task NotifyReminderInProgressAsync(
        Guid userId,
        string flowTitle,
        int progressPercent,
        DateTime deadline,
        Guid assignmentId,
        CancellationToken cancellationToken = default)
    {
        var daysLeft = (deadline - DateTime.UtcNow).Days;
        var notification = new Notification
        {
            Id = Guid.NewGuid(),
            UserId = userId,
            Type = NotificationType.ProgressReminder,
            Channel = NotificationChannel.Telegram,
            Priority = NotificationPriority.Medium,
            Title = "üìà –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ",
            Content = $"–ü–æ—Ç–æ–∫ \"{flowTitle}\" –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ {progressPercent}%. –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ {daysLeft} –¥–Ω–µ–π",
            RelatedEntityId = assignmentId,
            RelatedEntityType = "FlowAssignment"
        };

        await _notificationRepository.AddAsync(notification, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);
    }

    public async Task NotifyApproachingDeadlineAsync(
        Guid userId,
        string flowTitle,
        DateTime deadline,
        int daysLeft,
        Guid assignmentId,
        CancellationToken cancellationToken = default)
    {
        var notification = new Notification
        {
            Id = Guid.NewGuid(),
            UserId = userId,
            Type = NotificationType.DeadlineReminder,
            Channel = NotificationChannel.Telegram,
            Priority = NotificationPriority.High,
            Title = "üö® –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω",
            Content = $"–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ \"{flowTitle}\" –æ—Å—Ç–∞–ª–æ—Å—å {daysLeft} –¥–Ω–µ–π!",
            RelatedEntityId = assignmentId,
            RelatedEntityType = "FlowAssignment"
        };

        await _notificationRepository.AddAsync(notification, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);
    }

    public async Task NotifyUrgentDeadlineAsync(
        Guid userId,
        string flowTitle,
        DateTime deadline,
        Guid assignmentId,
        CancellationToken cancellationToken = default)
    {
        var notification = new Notification
        {
            Id = Guid.NewGuid(),
            UserId = userId,
            Type = NotificationType.UrgentDeadline,
            Channel = NotificationChannel.Telegram,
            Priority = NotificationPriority.Critical,
            Title = "üî• –°–†–û–ß–ù–û: –ò—Å—Ç–µ–∫–∞–µ—Ç –¥–µ–¥–ª–∞–π–Ω!",
            Content = $"–î–µ–¥–ª–∞–π–Ω –ø–æ –ø–æ—Ç–æ–∫—É \"{flowTitle}\" –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!",
            RelatedEntityId = assignmentId,
            RelatedEntityType = "FlowAssignment"
        };

        await _notificationRepository.AddAsync(notification, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);
    }

    public async Task NotifyAchievementEarnedAsync(
        Guid userId,
        string achievementTitle,
        string achievementDescription,
        Guid achievementId,
        CancellationToken cancellationToken = default)
    {
        var notification = new Notification
        {
            Id = Guid.NewGuid(),
            UserId = userId,
            Type = NotificationType.AchievementUnlocked,
            Channel = NotificationChannel.Telegram,
            Priority = NotificationPriority.High,
            Title = "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!",
            Content = $"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ \"{achievementTitle}\": {achievementDescription}",
            RelatedEntityId = achievementId,
            RelatedEntityType = "Achievement"
        };

        await _notificationRepository.AddAsync(notification, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);
    }
}