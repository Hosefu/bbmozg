using Lauf.Domain.Enums;
using Lauf.Domain.ValueObjects;

namespace Lauf.Domain.Entities.Notifications;

/// <summary>
/// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/// </summary>
public class Notification
{
    /// <summary>
    /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    /// </summary>
    public Guid Id { get; set; }

    /// <summary>
    /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–æ–ª—É—á–∞—Ç–µ–ª—è
    /// </summary>
    public Guid UserId { get; set; }

    /// <summary>
    /// –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    /// </summary>
    public NotificationType Type { get; set; }

    /// <summary>
    /// –ö–∞–Ω–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏
    /// </summary>
    public NotificationChannel Channel { get; set; }

    /// <summary>
    /// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    /// </summary>
    public NotificationPriority Priority { get; set; }

    /// <summary>
    /// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    /// </summary>
    public string Title { get; set; } = string.Empty;

    /// <summary>
    /// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    /// </summary>
    public string Content { get; set; } = string.Empty;


    /// <summary>
    /// –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    /// </summary>
    public NotificationStatus Status { get; set; } = NotificationStatus.Pending;

    /// <summary>
    /// –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    /// </summary>
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// –î–∞—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    /// </summary>
    public DateTime ScheduledAt { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// –î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    /// </summary>
    public DateTime? SentAt { get; set; }


    /// <summary>
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
    /// </summary>
    public int AttemptCount { get; set; } = 0;

    /// <summary>
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    /// </summary>
    public int MaxAttempts { get; set; } = 3;


    /// <summary>
    /// –°–≤—è–∑–∞–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å (–ø–æ—Ç–æ–∫, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ)
    /// </summary>
    public Guid? RelatedEntityId { get; set; }

    /// <summary>
    /// –¢–∏–ø —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
    /// </summary>
    public string? RelatedEntityType { get; set; }

    /// <summary>
    /// –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    /// </summary>
    public virtual Users.User User { get; set; } = null!;

    /// <summary>
    /// –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
    /// </summary>
    public void MarkAsSent()
    {
        Status = NotificationStatus.Sent;
        SentAt = DateTime.UtcNow;
    }


    /// <summary>
    /// –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
    /// </summary>
    public void MarkAsFailed()
    {
        AttemptCount++;
        
        if (AttemptCount >= MaxAttempts)
        {
            Status = NotificationStatus.Failed;
        }
        else
        {
            Status = NotificationStatus.Pending;
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
            ScheduledAt = DateTime.UtcNow.AddMinutes(Math.Pow(2, AttemptCount) * 5);
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–æ—Ç–æ–≤–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
    /// </summary>
    public bool IsReadyToSend()
    {
        return Status == NotificationStatus.Pending && 
               ScheduledAt <= DateTime.UtcNow && 
               AttemptCount < MaxAttempts;
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞
    /// </summary>
    public static Notification CreateFlowAssigned(
        Guid userId, 
        string flowTitle, 
        DateTime deadline,
        Guid flowAssignmentId)
    {
        return new Notification
        {
            Id = Guid.NewGuid(),
            UserId = userId,
            Type = NotificationType.FlowAssigned,
            Channel = NotificationChannel.Telegram,
            Priority = NotificationPriority.High,
            Title = "üìö –ù–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ!",
            Content = $"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ—Ç–æ–∫ –æ–±—É—á–µ–Ω–∏—è \"{flowTitle}\". –°—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {deadline:dd.MM.yyyy}",
            RelatedEntityId = flowAssignmentId,
            RelatedEntityType = "FlowAssignment"
        };
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞
    /// </summary>
    public static Notification CreateDeadlineReminder(
        Guid userId,
        string flowTitle,
        DateTime deadline,
        int daysLeft,
        Guid flowAssignmentId)
    {
        var priority = daysLeft <= 1 ? NotificationPriority.Critical : 
                      daysLeft <= 3 ? NotificationPriority.High : 
                      NotificationPriority.Medium;

        var emoji = daysLeft <= 1 ? "üö®" : daysLeft <= 3 ? "‚ö†Ô∏è" : "‚è∞";

        return new Notification
        {
            Id = Guid.NewGuid(),
            UserId = userId,
            Type = NotificationType.DeadlineReminder,
            Channel = NotificationChannel.Telegram,
            Priority = priority,
            Title = $"{emoji} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ",
            Content = $"–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è \"{flowTitle}\" –æ—Å—Ç–∞–ª–æ—Å—å {daysLeft} –¥–Ω. –î–µ–¥–ª–∞–π–Ω: {deadline:dd.MM.yyyy}",
            RelatedEntityId = flowAssignmentId,
            RelatedEntityType = "FlowAssignment"
        };
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    /// </summary>
    public static Notification CreateAchievementUnlocked(
        Guid userId,
        string achievementTitle,
        string achievementDescription,
        Guid achievementId)
    {
        return new Notification
        {
            Id = Guid.NewGuid(),
            UserId = userId,
            Type = NotificationType.AchievementUnlocked,
            Channel = NotificationChannel.Telegram,
            Priority = NotificationPriority.Medium,
            Title = "üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!",
            Content = $"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ \"{achievementTitle}\": {achievementDescription}",
            RelatedEntityId = achievementId,
            RelatedEntityType = "Achievement"
        };
    }
}