using System.Diagnostics;
using System.Text;

namespace Lauf.Api.Middleware;

/// <summary>
/// Middleware –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
/// </summary>
public class RequestLoggingMiddleware
{
    private readonly RequestDelegate _next;
    private readonly ILogger<RequestLoggingMiddleware> _logger;

    public RequestLoggingMiddleware(RequestDelegate next, ILogger<RequestLoggingMiddleware> logger)
    {
        _next = next;
        _logger = logger;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        var stopwatch = Stopwatch.StartNew();
        var requestId = Guid.NewGuid().ToString("N")[..8];
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        await LogIncomingRequest(context, requestId);

        try
        {
            await _next(context);
            stopwatch.Stop();
            
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –ø–æ—Ç–æ–∫–∞
            LogResponse(context, requestId, stopwatch.ElapsedMilliseconds);
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            _logger.LogError(ex, 
                "üö® [REQ-{RequestId}] –û–®–ò–ë–ö–ê {Method} {Path} –∑–∞ {ElapsedMs}ms", 
                requestId, context.Request.Method, context.Request.Path, stopwatch.ElapsedMilliseconds);
            throw;
        }
    }

    private async Task LogIncomingRequest(HttpContext context, string requestId)
    {
        var request = context.Request;
        var userAgent = request.Headers.UserAgent.ToString();
        var clientIp = context.Connection.RemoteIpAddress?.ToString() ?? "unknown";
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        var requestType = GetRequestType(request);
        var icon = GetRequestIcon(request);

        _logger.LogInformation(
            "{Icon} [REQ-{RequestId}] {RequestType} {Method} {Path}{QueryString} | IP: {ClientIP} | UA: {UserAgent}",
            icon, requestId, requestType, request.Method, request.Path, request.QueryString, 
            clientIp, userAgent);

        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
        if (request.Headers.ContainsKey("Authorization"))
        {
            var authHeader = request.Headers["Authorization"].ToString();
            var authType = authHeader.Split(' ').FirstOrDefault() ?? "Unknown";
            _logger.LogDebug("[REQ-{RequestId}] Auth: {AuthType}", requestId, authType);
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ POST/PUT –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è REST API)
        if (IsRestApiRequest(request) && (request.Method == "POST" || request.Method == "PUT") && request.ContentLength > 0)
        {
            await LogRequestBody(request, requestId);
        }
    }

    private async Task LogRequestBody(HttpRequest request, string requestId)
    {
        try
        {
            request.EnableBuffering();
            var body = await new StreamReader(request.Body).ReadToEndAsync();
            request.Body.Position = 0;

            if (!string.IsNullOrEmpty(body) && body.Length < 2000) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
            {
                _logger.LogDebug("[REQ-{RequestId}] Body: {RequestBody}", requestId, body);
            }
            else if (body.Length >= 2000)
            {
                _logger.LogDebug("[REQ-{RequestId}] Body: [Large payload - {Size} chars]", requestId, body.Length);
            }
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "[REQ-{RequestId}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞", requestId);
        }
    }

    private void LogResponse(HttpContext context, string requestId, long elapsedMs)
    {
        try
        {
            var response = context.Response;
            var responseSize = response.ContentLength ?? 0;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å –∫–æ–¥—É
            var logLevel = GetLogLevelByStatusCode(response.StatusCode);
            var icon = GetResponseIcon(response.StatusCode);
            var statusCategory = GetStatusCategory(response.StatusCode);

            _logger.Log(logLevel,
                "{Icon} [REQ-{RequestId}] {StatusCategory} {StatusCode} | {ElapsedMs}ms | {ResponseSize} bytes | {ContentType}",
                icon, requestId, statusCategory, response.StatusCode, elapsedMs, responseSize, 
                response.ContentType ?? "unknown");

            // –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–¥–µ–ª—å–Ω–æ
            if (elapsedMs > 1000)
            {
                _logger.LogWarning(
                    "üêå [REQ-{RequestId}] –ú–ï–î–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–°: {Method} {Path} –≤—ã–ø–æ–ª–Ω—è–ª—Å—è {ElapsedMs}ms",
                    requestId, context.Request.Method, context.Request.Path, elapsedMs);
            }

            // –õ–æ–≥–∏—Ä—É–µ–º GraphQL –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            if (IsGraphQLRequest(context.Request))
            {
                LogGraphQLOperation(context, requestId);
            }
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "[REQ-{RequestId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞", requestId);
        }
    }

    private void LogGraphQLOperation(HttpContext context, string requestId)
    {
        try
        {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ query string –¥–ª—è SDL –∑–∞–ø—Ä–æ—Å–æ–≤
            if (context.Request.Query.ContainsKey("sdl"))
            {
                _logger.LogInformation(
                    "üî∏ [REQ-{RequestId}] GraphQL Schema Request (SDL)",
                    requestId);
                return;
            }

            // –î–ª—è –¥—Ä—É–≥–∏—Ö GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            _logger.LogInformation(
                "üî∏ [REQ-{RequestId}] GraphQL Operation",
                requestId);
        }
        catch (Exception ex)
        {
            _logger.LogDebug(ex, "[REQ-{RequestId}] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å GraphQL –æ–ø–µ—Ä–∞—Ü–∏—é", requestId);
        }
    }



    private string GetRequestType(HttpRequest request)
    {
        if (IsGraphQLRequest(request)) return "GraphQL";
        if (IsSignalRRequest(request)) return "SignalR";
        if (IsRestApiRequest(request)) return "REST";
        if (IsHealthCheckRequest(request)) return "Health";
        if (IsHangfireRequest(request)) return "Hangfire";
        return "Static";
    }

    private string GetRequestIcon(HttpRequest request)
    {
        if (IsGraphQLRequest(request)) return "üî∏";
        if (IsSignalRRequest(request)) return "‚ö°";
        if (IsRestApiRequest(request)) return "üì°";
        if (IsHealthCheckRequest(request)) return "üíö";
        if (IsHangfireRequest(request)) return "‚öôÔ∏è";
        return "üìÑ";
    }

    private string GetResponseIcon(int statusCode)
    {
        return statusCode switch
        {
            >= 200 and < 300 => "‚úÖ",
            >= 300 and < 400 => "‚Ü©Ô∏è",
            >= 400 and < 500 => "‚ö†Ô∏è",
            >= 500 => "üö®",
            _ => "‚ùì"
        };
    }

    private string GetStatusCategory(int statusCode)
    {
        return statusCode switch
        {
            >= 200 and < 300 => "SUCCESS",
            >= 300 and < 400 => "REDIRECT",
            >= 400 and < 500 => "CLIENT_ERROR",
            >= 500 => "SERVER_ERROR",
            _ => "UNKNOWN"
        };
    }

    private LogLevel GetLogLevelByStatusCode(int statusCode)
    {
        return statusCode switch
        {
            >= 200 and < 300 => LogLevel.Information,
            >= 300 and < 400 => LogLevel.Information,
            >= 400 and < 500 => LogLevel.Warning,
            >= 500 => LogLevel.Error,
            _ => LogLevel.Information
        };
    }

    private bool IsGraphQLRequest(HttpRequest request) => 
        request.Path.StartsWithSegments("/graphql");

    private bool IsSignalRRequest(HttpRequest request) => 
        request.Path.StartsWithSegments("/hubs");

    private bool IsRestApiRequest(HttpRequest request) => 
        request.Path.StartsWithSegments("/api");

    private bool IsHealthCheckRequest(HttpRequest request) => 
        request.Path.StartsWithSegments("/health");

    private bool IsHangfireRequest(HttpRequest request) => 
        request.Path.StartsWithSegments("/hangfire");
} 