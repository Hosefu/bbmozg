using FluentAssertions;
using Microsoft.AspNetCore.Mvc.Testing;
using Lauf.Api.Tests.Infrastructure;
using Lauf.Application.DTOs.Users;
using Lauf.Application.DTOs.Flows;
using Lauf.Application.Commands.FlowManagement;
using Lauf.Application.Commands.FlowAssignment;
using Lauf.Domain.Entities.Users;
using Lauf.Domain.Entities.Flows;
using Lauf.Domain.ValueObjects;
using Lauf.Domain.Enums;
using System.Net;
using Xunit;
using Xunit.Abstractions;

namespace Lauf.Api.Tests.E2E;

/// <summary>
/// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ E2E —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
/// </summary>
public class OnboardingFlowE2ETests : ExtendedApiTestBase
{
    public OnboardingFlowE2ETests(WebApplicationFactory<Program> factory, ITestOutputHelper output) 
        : base(factory, output)
    {
    }

    [Fact]
    public async Task CompleteOnboardingFlow_ShouldExecuteSuccessfully()
    {
        // === –≠–¢–ê–ü 1: –ù–ê–°–¢–†–û–ô–ö–ê –î–ê–ù–ù–´–• ===
        Output.WriteLine("üöÄ === –≠–¢–ê–ü 1: –ù–ê–°–¢–†–û–ô–ö–ê –î–ê–ù–ù–´–• ===");
        
        await ClearDatabase();
        await SetupInitialData();

        // === –≠–¢–ê–ü 2: –ú–û–î–ï–†–ê–¢–û–† –°–û–ó–î–ê–ï–¢ –ü–û–¢–û–ö ===
        Output.WriteLine("üë®‚Äçüíº === –≠–¢–ê–ü 2: –ú–û–î–ï–†–ê–¢–û–† –°–û–ó–î–ê–ï–¢ –ü–û–¢–û–ö ===");
        
        var flowId = await ModeratorCreatesFlow();

        // === –≠–¢–ê–ü 3: –ú–û–î–ï–†–ê–¢–û–† –î–û–ë–ê–í–õ–Ø–ï–¢ –®–ê–ì–ò –ò –ö–û–ú–ü–û–ù–ï–ù–¢–´ ===
        Output.WriteLine("üîß === –≠–¢–ê–ü 3: –ú–û–î–ï–†–ê–¢–û–† –î–û–ë–ê–í–õ–Ø–ï–¢ –®–ê–ì–ò –ò –ö–û–ú–ü–û–ù–ï–ù–¢–´ ===");
        
        await ModeratorAddsStepsAndComponents(flowId);

        // === –≠–¢–ê–ü 4: –ú–û–î–ï–†–ê–¢–û–† –ü–£–ë–õ–ò–ö–£–ï–¢ –ü–û–¢–û–ö ===
        Output.WriteLine("üì¢ === –≠–¢–ê–ü 4: –ú–û–î–ï–†–ê–¢–û–† –ü–£–ë–õ–ò–ö–£–ï–¢ –ü–û–¢–û–ö ===");
        
        await ModeratorPublishesFlow(flowId);

        // === –≠–¢–ê–ü 5: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –†–ï–ì–ò–°–¢–†–ò–†–£–ï–¢–°–Ø ===
        Output.WriteLine("üë§ === –≠–¢–ê–ü 5: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –†–ï–ì–ò–°–¢–†–ò–†–£–ï–¢–°–Ø ===");
        
        var userId = await UserRegisters();

        // === –≠–¢–ê–ü 6: –ë–ê–î–î–ò –†–ï–ì–ò–°–¢–†–ò–†–£–ï–¢–°–Ø ===
        Output.WriteLine("ü§ù === –≠–¢–ê–ü 6: –ë–ê–î–î–ò –†–ï–ì–ò–°–¢–†–ò–†–£–ï–¢–°–Ø ===");
        
        var buddyId = await BuddyRegisters();

        // === –≠–¢–ê–ü 7: –ú–û–î–ï–†–ê–¢–û–† –ù–ê–ó–ù–ê–ß–ê–ï–¢ –ü–û–¢–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ ===
        Output.WriteLine("üéØ === –≠–¢–ê–ü 7: –ú–û–î–ï–†–ê–¢–û–† –ù–ê–ó–ù–ê–ß–ê–ï–¢ –ü–û–¢–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ ===");
        
        var assignmentId = await ModeratorAssignsFlowToUser(flowId, userId, buddyId);

        // === –≠–¢–ê–ü 8: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–†–û–°–ú–ê–¢–†–ò–í–ê–ï–¢ –ù–ê–ó–ù–ê–ß–ï–ù–ù–´–ï –ü–û–¢–û–ö–ò ===
        Output.WriteLine("üëÄ === –≠–¢–ê–ü 8: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–†–û–°–ú–ê–¢–†–ò–í–ê–ï–¢ –ù–ê–ó–ù–ê–ß–ï–ù–ù–´–ï –ü–û–¢–û–ö–ò ===");
        
        await UserViewsAssignedFlows(userId);

        // === –≠–¢–ê–ü 9: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò–ó–£–ß–ê–ï–¢ –î–ï–¢–ê–õ–ò –ü–û–¢–û–ö–ê ===
        Output.WriteLine("üìñ === –≠–¢–ê–ü 9: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò–ó–£–ß–ê–ï–¢ –î–ï–¢–ê–õ–ò –ü–û–¢–û–ö–ê ===");
        
        await UserViewsFlowDetails(flowId, userId);

        // === –≠–¢–ê–ü 10: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ê–ß–ò–ù–ê–ï–¢ –ü–†–û–•–û–ñ–î–ï–ù–ò–ï ===
        Output.WriteLine("‚ñ∂Ô∏è === –≠–¢–ê–ü 10: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ê–ß–ò–ù–ê–ï–¢ –ü–†–û–•–û–ñ–î–ï–ù–ò–ï ===");
        
        await UserStartsFlow(assignmentId);

        // === –≠–¢–ê–ü 11: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–†–û–•–û–î–ò–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–´ ===
        Output.WriteLine("üìö === –≠–¢–ê–ü 11: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–†–û–•–û–î–ò–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–´ ===");
        
        await UserCompletesComponents(assignmentId);

        // === –≠–¢–ê–ü 12: –ë–ê–î–î–ò –û–¢–°–õ–ï–ñ–ò–í–ê–ï–¢ –ü–†–û–ì–†–ï–°–° ===
        Output.WriteLine("üìä === –≠–¢–ê–ü 12: –ë–ê–î–î–ò –û–¢–°–õ–ï–ñ–ò–í–ê–ï–¢ –ü–†–û–ì–†–ï–°–° ===");
        
        await BuddyTracksProgress(userId, assignmentId);

        // === –≠–¢–ê–ü 13: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–í–ï–†–®–ê–ï–¢ –ü–û–¢–û–ö ===
        Output.WriteLine("üéâ === –≠–¢–ê–ü 13: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–í–ï–†–®–ê–ï–¢ –ü–û–¢–û–ö ===");
        
        await UserCompletesFlow(assignmentId);

        // === –≠–¢–ê–ü 14: –ü–†–û–í–ï–†–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø ===
        Output.WriteLine("‚úÖ === –≠–¢–ê–ü 14: –ü–†–û–í–ï–†–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø ===");
        
        await VerifyFinalState(flowId, userId, assignmentId);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á—ë—Ç
        GenerateApiCallReport("CompleteOnboardingFlow");
        
        Output.WriteLine("üéä === –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û! ===");
    }

    private async Task SetupInitialData()
    {
        // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫—É—é —Ä–æ–ª—å
        var adminRole = new Role
        {
            Id = Guid.NewGuid(),
            Name = "Administrator",
            Description = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã",
            Permissions = "admin,manage_flows,manage_users",
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow
        };

        var buddyRole = new Role
        {
            Id = Guid.NewGuid(),
            Name = "Buddy",
            Description = "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫",
            Permissions = "view_flows,mentor_users",
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow
        };

        Context.Roles.AddRange(adminRole, buddyRole);

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        var moderator = new User
        {
            Id = Guid.NewGuid(),
            FirstName = "–ê–Ω–Ω–∞",
            LastName = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            Email = "admin@lauf.com",
            Position = "HR Director",
            TelegramUserId = new TelegramUserId(1000001),
            IsActive = true,
            Language = "ru",
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow
        };

        Context.Users.Add(moderator);
        await Context.SaveChangesAsync();

        Output.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: {moderator.FirstName} {moderator.LastName} (ID: {moderator.Id})");
    }

    private async Task<Guid> ModeratorCreatesFlow()
    {
        var createFlowCommand = new CreateFlowCommand
        {
            Title = "üöÄ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
            Description = "–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ",
            Category = "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
            Tags = "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞,–æ–Ω–±–æ—Ä–¥–∏–Ω–≥,–∞–¥–∞–ø—Ç–∞—Ü–∏—è",
            EstimatedDurationMinutes = 2400, // 40 —á–∞—Å–æ–≤
            RequiredRole = "Developer",
            IsRequired = true,
            Priority = FlowPriority.High,
            CreatedById = Context.Users.First().Id
        };

        var response = await PostAsync("/api/flows", createFlowCommand, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞");
        
        var createdFlow = await AssertSuccessAndGetData<FlowDto>(response, "—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞");
        createdFlow.Title.Should().Be(createFlowCommand.Title);
        createdFlow.Status.Should().Be(FlowStatus.Draft);

        Output.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ—Ç–æ–∫: {createdFlow.Title} (ID: {createdFlow.Id})");
        
        return createdFlow.Id;
    }

    private async Task ModeratorAddsStepsAndComponents(Guid flowId)
    {
        // –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏ –∫ –ø–æ—Ç–æ–∫—É (–∏–º–∏—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î)
        var step1 = new FlowStep
        {
            Id = Guid.NewGuid(),
            FlowId = flowId,
            Title = "üìã –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π",
            Description = "–ò–∑—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏, —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–ø–∞–Ω–∏–∏",
            Order = 1,
            EstimatedDurationMinutes = 480, // 8 —á–∞—Å–æ–≤
            IsRequired = true,
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow
        };

        var step2 = new FlowStep
        {
            Id = Guid.NewGuid(),
            FlowId = flowId,
            Title = "üíª –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞",
            Description = "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –ü–û –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
            Order = 2,
            EstimatedDurationMinutes = 240, // 4 —á–∞—Å–∞
            IsRequired = true,
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow
        };

        var step3 = new FlowStep
        {
            Id = Guid.NewGuid(),
            FlowId = flowId,
            Title = "üéØ –ü–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
            Description = "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞",
            Order = 3,
            EstimatedDurationMinutes = 1680, // 28 —á–∞—Å–æ–≤
            IsRequired = true,
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow
        };

        Context.FlowSteps.AddRange(step1, step2, step3);
        await Context.SaveChangesAsync();

        Output.WriteLine($"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —à–∞–≥–∏: {step1.Title}, {step2.Title}, {step3.Title}");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —à–∞–≥–∏ –¥–æ–±–∞–≤–∏–ª–∏—Å—å —á–µ—Ä–µ–∑ API
        var getFlowResponse = await GetAsync($"/api/flows/{flowId}", "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —Å —à–∞–≥–∞–º–∏");
        var flowWithSteps = await AssertSuccessAndGetData<FlowDto>(getFlowResponse, "–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —Å —à–∞–≥–∞–º–∏");
        flowWithSteps.TotalSteps.Should().Be(3);
    }

    private async Task ModeratorPublishesFlow(Guid flowId)
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ç–æ–∫–∞ –Ω–∞ Published
        var updateCommand = new UpdateFlowCommand
        {
            Id = flowId,
            Title = "üöÄ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
            Description = "–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ",
            Category = "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
            Tags = "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞,–æ–Ω–±–æ—Ä–¥–∏–Ω–≥,–∞–¥–∞–ø—Ç–∞—Ü–∏—è",
            Status = FlowStatus.Published,
            EstimatedDurationMinutes = 2400
        };

        var response = await PutAsync($"/api/flows/{flowId}", updateCommand, "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞");
        
        var updatedFlow = await AssertSuccessAndGetData<FlowDto>(response, "–ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞");
        updatedFlow.Status.Should().Be(FlowStatus.Published);

        Output.WriteLine($"‚úÖ –ü–æ—Ç–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {updatedFlow.Title}");
    }

    private async Task<Guid> UserRegisters()
    {
        var createUserCommand = new CreateUserCommand
        {
            FirstName = "–ò–≤–∞–Ω",
            LastName = "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            Email = "ivan.developer@lauf.com",
            Position = "Junior Developer",
            TelegramUserId = 2000001,
            Language = "ru"
        };

        var response = await PostAsync("/api/users", createUserCommand, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        
        var createdUser = await AssertSuccessAndGetData<UserDto>(response, "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        createdUser.FirstName.Should().Be(createUserCommand.FirstName);
        createdUser.Email.Should().Be(createUserCommand.Email);

        Output.WriteLine($"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {createdUser.FirstName} {createdUser.LastName} (ID: {createdUser.Id})");
        
        return createdUser.Id;
    }

    private async Task<Guid> BuddyRegisters()
    {
        var createBuddyCommand = new CreateUserCommand
        {
            FirstName = "–ü–µ—Ç—Ä",
            LastName = "–ú–µ–Ω—Ç–æ—Ä",
            Email = "petr.mentor@lauf.com",
            Position = "Senior Developer",
            TelegramUserId = 3000001,
            Language = "ru"
        };

        var response = await PostAsync("/api/users", createBuddyCommand, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞");
        
        var createdBuddy = await AssertSuccessAndGetData<UserDto>(response, "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞");
        createdBuddy.FirstName.Should().Be(createBuddyCommand.FirstName);

        Output.WriteLine($"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫: {createdBuddy.FirstName} {createdBuddy.LastName} (ID: {createdBuddy.Id})");
        
        return createdBuddy.Id;
    }

    private async Task<Guid> ModeratorAssignsFlowToUser(Guid flowId, Guid userId, Guid buddyId)
    {
        var assignCommand = new AssignFlowCommand
        {
            FlowId = flowId,
            UserId = userId,
            BuddyId = buddyId,
            DueDate = DateTime.UtcNow.AddDays(30),
            Priority = AssignmentPriority.High,
            Notes = "–ü–µ—Ä–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"
        };

        var response = await PostAsync("/api/flow-assignments", assignCommand, "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
        
        var assignment = await AssertSuccessAndGetData<FlowAssignmentDto>(response, "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞");
        assignment.FlowId.Should().Be(flowId);
        assignment.UserId.Should().Be(userId);
        assignment.BuddyId.Should().Be(buddyId);
        assignment.Status.Should().Be(AssignmentStatus.Assigned);

        Output.WriteLine($"‚úÖ –ü–æ—Ç–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (Assignment ID: {assignment.Id})");
        
        return assignment.Id;
    }

    private async Task UserViewsAssignedFlows(Guid userId)
    {
        var response = await GetAsync($"/api/flow-assignments/user/{userId}", "–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤");
        
        var assignments = await AssertSuccessAndGetData<IEnumerable<FlowAssignmentDto>>(response, "–ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        assignments.Should().NotBeEmpty();
        assignments.Should().ContainSingle(a => a.UserId == userId);

        Output.WriteLine($"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏: {assignments.Count()} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π");
    }

    private async Task UserViewsFlowDetails(Guid flowId, Guid userId)
    {
        var response = await GetAsync($"/api/flows/{flowId}/details?userId={userId}", "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø–æ—Ç–æ–∫–∞");
        
        response.StatusCode.Should().Be(HttpStatusCode.OK);
        var content = await response.Content.ReadAsStringAsync();
        content.Should().NotBeNullOrEmpty();

        Output.WriteLine("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑—É—á–∏–ª –¥–µ—Ç–∞–ª–∏ –ø–æ—Ç–æ–∫–∞");
    }

    private async Task UserStartsFlow(Guid assignmentId)
    {
        var startCommand = new StartFlowCommand
        {
            AssignmentId = assignmentId
        };

        var response = await PostAsync($"/api/flow-assignments/{assignmentId}/start", startCommand, "–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞");
        
        response.StatusCode.Should().Be(HttpStatusCode.OK);

        Output.WriteLine("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞");
    }

    private async Task UserCompletesComponents(Guid assignmentId)
    {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã API –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        
        Output.WriteLine("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±—É—á–µ–Ω–∏—è (–∏–º–∏—Ç–∞—Ü–∏—è)");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        var progressResponse = await GetAsync($"/api/flow-assignments/{assignmentId}/progress", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞");
        progressResponse.StatusCode.Should().Be(HttpStatusCode.OK);
    }

    private async Task BuddyTracksProgress(Guid userId, Guid assignmentId)
    {
        var progressResponse = await GetAsync($"/api/flow-assignments/{assignmentId}/progress", "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å");
        progressResponse.StatusCode.Should().Be(HttpStatusCode.OK);

        Output.WriteLine("‚úÖ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –æ—Ç—Å–ª–µ–¥–∏–ª –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ");
    }

    private async Task UserCompletesFlow(Guid assignmentId)
    {
        var completeCommand = new CompleteFlowCommand
        {
            AssignmentId = assignmentId,
            CompletionNotes = "–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"
        };

        var response = await PostAsync($"/api/flow-assignments/{assignmentId}/complete", completeCommand, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞");
        
        response.StatusCode.Should().Be(HttpStatusCode.OK);

        Output.WriteLine("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –ø–æ—Ç–æ–∫");
    }

    private async Task VerifyFinalState(Guid flowId, Guid userId, Guid assignmentId)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        var assignmentResponse = await GetAsync($"/api/flow-assignments/{assignmentId}", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è");
        var assignment = await AssertSuccessAndGetData<FlowAssignmentDto>(assignmentResponse, "–ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è");
        
        assignment.Status.Should().Be(AssignmentStatus.Completed);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ç–æ–∫–∞
        var statsResponse = await GetAsync($"/api/flows/{flowId}/stats", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ç–æ–∫–∞");
        statsResponse.StatusCode.Should().Be(HttpStatusCode.OK);

        Output.WriteLine("‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ - –≤—Å–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
    }
}