using FluentAssertions;
using Microsoft.AspNetCore.Mvc.Testing;
using Xunit;
using Xunit.Abstractions;

namespace Lauf.Api.Tests.E2E;

/// <summary>
/// –ü–æ–ª–Ω—ã–π E2E —Å—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã Lauf
/// –≠–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
/// </summary>
public class CompleteE2EScenarioTests : BaseE2ETest
{
    public CompleteE2EScenarioTests(WebApplicationFactory<Program> factory, ITestOutputHelper output) 
        : base(factory, output)
    {
    }

    [Fact]
    public async Task CompleteOnboardingProcess_AllRolesWorkflow_ShouldSucceed()
    {
        try
        {
            _output.WriteLine("üöÄ === –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ì–û E2E –°–¶–ï–ù–ê–†–ò–Ø –û–ù–ë–û–†–î–ò–ù–ì–ê ===");
            _output.WriteLine("");

            // ===============================================
            // –ß–ê–°–¢–¨ 1: –ú–û–î–ï–†–ê–¢–û–† –°–û–ó–î–ê–ï–¢ –°–ò–°–¢–ï–ú–£ –û–ë–£–ß–ï–ù–ò–Ø
            // ===============================================
            _output.WriteLine("üë§ === –ß–ê–°–¢–¨ 1: –ú–û–î–ï–†–ê–¢–û–† –ù–ê–°–¢–†–ê–ò–í–ê–ï–¢ –°–ò–°–¢–ï–ú–£ ===");

            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            var moderatorResponse = await ExecuteGraphQLAsync<CreateUserResponse>(
                TestDataFactory.GraphQLQueries.CreateUser,
                new { input = TestDataFactory.InputObjects.CreateUserInput(
                    telegramId: 100001,
                    email: "head.moderator@lauf.com",
                    fullName: "–ì–ª–∞–≤–Ω—ã–π –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã",
                    position: "Head of Learning & Development"
                )}
            );

            var moderatorId = moderatorResponse.CreateUser.Id;
            _output.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: {moderatorResponse.CreateUser.FullName} (ID: {moderatorId})");

            // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
            var mainFlowResponse = await ExecuteGraphQLAsync<CreateFlowResponse>(
                TestDataFactory.GraphQLQueries.CreateFlow,
                new { input = TestDataFactory.InputObjects.CreateFlowInput(
                    title: "üéØ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ 2024",
                    description: "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∏–∑—É—á–µ–Ω–∏–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã, –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤",
                    isSequential: true,
                    allowRetry: true,
                    timeLimit: 30
                )}
            );

            var mainFlowId = mainFlowResponse.CreateFlow.Id;
            _output.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫: {mainFlowResponse.CreateFlow.Title} (ID: {mainFlowId})");

            // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
            var techFlowResponse = await ExecuteGraphQLAsync<CreateFlowResponse>(
                TestDataFactory.GraphQLQueries.CreateFlow,
                new { input = TestDataFactory.InputObjects.CreateFlowInput(
                    title: "üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
                    description: "–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
                    timeLimit: 21
                )}
            );

            var hrFlowResponse = await ExecuteGraphQLAsync<CreateFlowResponse>(
                TestDataFactory.GraphQLQueries.CreateFlow,
                new { input = TestDataFactory.InputObjects.CreateFlowInput(
                    title: "üìã HR –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç",
                    description: "–ò–∑—É—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö HR –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞",
                    timeLimit: 14
                )}
            );

            var techFlowId = techFlowResponse.CreateFlow.Id;
            var hrFlowId = hrFlowResponse.CreateFlow.Id;

            _output.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫: {techFlowResponse.CreateFlow.Title} (ID: {techFlowId})");
            _output.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω HR –ø–æ—Ç–æ–∫: {hrFlowResponse.CreateFlow.Title} (ID: {hrFlowId})");

            // –ü—É–±–ª–∏–∫—É–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
            const string updateFlowMutation = @"
                mutation UpdateFlow($input: UpdateFlowInput!) {
                    updateFlow(input: $input) {
                        id
                        status
                    }
                }";

            await ExecuteGraphQLAsync<UpdateFlowResponse>(updateFlowMutation, new { input = new { id = mainFlowId, status = "Published" } });
            await ExecuteGraphQLAsync<UpdateFlowResponse>(updateFlowMutation, new { input = new { id = techFlowId, status = "Published" } });
            await ExecuteGraphQLAsync<UpdateFlowResponse>(updateFlowMutation, new { input = new { id = hrFlowId, status = "Published" } });

            _output.WriteLine("‚úÖ –í—Å–µ –ø–æ—Ç–æ–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
            var allFlowsResponse = await ExecuteGraphQLAsync<GetFlowsResponse>(
                TestDataFactory.GraphQLQueries.GetFlows,
                new { skip = 0, take = 20 }
            );

            allFlowsResponse.Flows.Should().HaveCountGreaterOrEqualTo(3);
            _output.WriteLine($"üìä –í—Å–µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ—Ç–æ–∫–æ–≤: {allFlowsResponse.Flows.Count}");
            _output.WriteLine("");

            // ===============================================
            // –ß–ê–°–¢–¨ 2: –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ê–ù–î–´ –ù–ê–°–¢–ê–í–ù–ò–ö–û–í
            // ===============================================
            _output.WriteLine("üë• === –ß–ê–°–¢–¨ 2: –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î–´ –ù–ê–°–¢–ê–í–ù–ò–ö–û–í ===");

            // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—à–µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
            var seniorBuddyResponse = await ExecuteGraphQLAsync<CreateUserResponse>(
                TestDataFactory.GraphQLQueries.CreateUser,
                new { input = TestDataFactory.InputObjects.CreateUserInput(
                    telegramId: 200001,
                    email: "senior.buddy@lauf.com",
                    fullName: "–°—Ç–∞—Ä—à–∏–π –ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –ö–æ–º–∞–Ω–¥—ã",
                    position: "Senior Team Lead & Mentor"
                )}
            );

            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
            var techBuddyResponse = await ExecuteGraphQLAsync<CreateUserResponse>(
                TestDataFactory.GraphQLQueries.CreateUser,
                new { input = TestDataFactory.InputObjects.CreateUserInput(
                    telegramId: 200002,
                    email: "tech.buddy@lauf.com",
                    fullName: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ù–∞—Å—Ç–∞–≤–Ω–∏–∫",
                    position: "Senior Software Engineer & Mentor"
                )}
            );

            // –°–æ–∑–¥–∞–µ–º HR –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
            var hrBuddyResponse = await ExecuteGraphQLAsync<CreateUserResponse>(
                TestDataFactory.GraphQLQueries.CreateUser,
                new { input = TestDataFactory.InputObjects.CreateUserInput(
                    telegramId: 200003,
                    email: "hr.buddy@lauf.com",
                    fullName: "HR –ù–∞—Å—Ç–∞–≤–Ω–∏–∫",
                    position: "HR Business Partner & Mentor"
                )}
            );

            var seniorBuddyId = seniorBuddyResponse.CreateUser.Id;
            var techBuddyId = techBuddyResponse.CreateUser.Id;
            var hrBuddyId = hrBuddyResponse.CreateUser.Id;

            _output.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç–∞—Ä—à–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫: {seniorBuddyResponse.CreateUser.FullName}");
            _output.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫: {techBuddyResponse.CreateUser.FullName}");
            _output.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω HR –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫: {hrBuddyResponse.CreateUser.FullName}");
            _output.WriteLine("");

            // ===============================================
            // –ß–ê–°–¢–¨ 3: –ù–û–í–´–ï –°–û–¢–†–£–î–ù–ò–ö–ò –ü–†–ò–°–û–ï–î–ò–ù–Ø–Æ–¢–°–Ø
            // ===============================================
            _output.WriteLine("üÜï === –ß–ê–°–¢–¨ 3: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–´–• –°–û–¢–†–£–î–ù–ò–ö–û–í ===");

            // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã—Ö –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            var juniorDevResponse = await ExecuteGraphQLAsync<CreateUserResponse>(
                TestDataFactory.GraphQLQueries.CreateUser,
                new { input = TestDataFactory.InputObjects.CreateUserInput(
                    telegramId: 300001,
                    email: "junior.dev@lauf.com",
                    fullName: "–ú–æ–ª–æ–¥–æ–π –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                    position: "Junior Software Developer"
                )}
            );

            var designerResponse = await ExecuteGraphQLAsync<CreateUserResponse>(
                TestDataFactory.GraphQLQueries.CreateUser,
                new { input = TestDataFactory.InputObjects.CreateUserInput(
                    telegramId: 300002,
                    email: "new.designer@lauf.com",
                    fullName: "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –î–∏–∑–∞–π–Ω–µ—Ä",
                    position: "UI/UX Designer"
                )}
            );

            var qaEngineerResponse = await ExecuteGraphQLAsync<CreateUserResponse>(
                TestDataFactory.GraphQLQueries.CreateUser,
                new { input = TestDataFactory.InputObjects.CreateUserInput(
                    telegramId: 300003,
                    email: "qa.engineer@lauf.com",
                    fullName: "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –ö–∞—á–µ—Å—Ç–≤–∞",
                    position: "QA Engineer"
                )}
            );

            var hrSpecialistResponse = await ExecuteGraphQLAsync<CreateUserResponse>(
                TestDataFactory.GraphQLQueries.CreateUser,
                new { input = TestDataFactory.InputObjects.CreateUserInput(
                    telegramId: 300004,
                    email: "hr.specialist@lauf.com",
                    fullName: "HR –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
                    position: "HR Specialist"
                )}
            );

            var juniorDevId = juniorDevResponse.CreateUser.Id;
            var designerId = designerResponse.CreateUser.Id;
            var qaEngineerId = qaEngineerResponse.CreateUser.Id;
            var hrSpecialistId = hrSpecialistResponse.CreateUser.Id;

            _output.WriteLine($"‚úÖ –ù–æ–≤—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:");
            _output.WriteLine($"   - {juniorDevResponse.CreateUser.FullName} ({juniorDevResponse.CreateUser.Position})");
            _output.WriteLine($"   - {designerResponse.CreateUser.FullName} ({designerResponse.CreateUser.Position})");
            _output.WriteLine($"   - {qaEngineerResponse.CreateUser.FullName} ({qaEngineerResponse.CreateUser.Position})");
            _output.WriteLine($"   - {hrSpecialistResponse.CreateUser.FullName} ({hrSpecialistResponse.CreateUser.Position})");

            // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            var allUsersResponse = await ExecuteGraphQLAsync<GetUsersResponse>(
                TestDataFactory.GraphQLQueries.GetUsers,
                new { skip = 0, take = 50 }
            );

            allUsersResponse.Users.Should().HaveCountGreaterOrEqualTo(8);
            _output.WriteLine($"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {allUsersResponse.Users.Count}");
            _output.WriteLine("");

            // ===============================================
            // –ß–ê–°–¢–¨ 4: –ù–ê–°–¢–ê–í–ù–ò–ö–ò –ù–ê–ó–ù–ê–ß–ê–Æ–¢ –ü–†–û–ì–†–ê–ú–ú–´ –û–ë–£–ß–ï–ù–ò–Ø
            // ===============================================
            _output.WriteLine("üìã === –ß–ê–°–¢–¨ 4: –ù–ê–°–¢–ê–í–ù–ò–ö–ò –ù–ê–ó–ù–ê–ß–ê–Æ–¢ –ü–†–û–ì–†–ê–ú–ú–´ ===");

            // –°—Ç–∞—Ä—à–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –≤—Å–µ–º
            var assignment1 = await ExecuteGraphQLAsync<AssignFlowResponse>(
                TestDataFactory.GraphQLQueries.AssignFlow,
                new { input = TestDataFactory.InputObjects.AssignFlowInput(juniorDevId, mainFlowId, DateTime.UtcNow.AddDays(30), seniorBuddyId) }
            );

            var assignment2 = await ExecuteGraphQLAsync<AssignFlowResponse>(
                TestDataFactory.GraphQLQueries.AssignFlow,
                new { input = TestDataFactory.InputObjects.AssignFlowInput(designerId, mainFlowId, DateTime.UtcNow.AddDays(30), seniorBuddyId) }
            );

            var assignment3 = await ExecuteGraphQLAsync<AssignFlowResponse>(
                TestDataFactory.GraphQLQueries.AssignFlow,
                new { input = TestDataFactory.InputObjects.AssignFlowInput(qaEngineerId, mainFlowId, DateTime.UtcNow.AddDays(30), seniorBuddyId) }
            );

            var assignment4 = await ExecuteGraphQLAsync<AssignFlowResponse>(
                TestDataFactory.GraphQLQueries.AssignFlow,
                new { input = TestDataFactory.InputObjects.AssignFlowInput(hrSpecialistId, mainFlowId, DateTime.UtcNow.AddDays(30), seniorBuddyId) }
            );

            // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
            var techAssignment = await ExecuteGraphQLAsync<AssignFlowResponse>(
                TestDataFactory.GraphQLQueries.AssignFlow,
                new { input = TestDataFactory.InputObjects.AssignFlowInput(juniorDevId, techFlowId, DateTime.UtcNow.AddDays(21), techBuddyId) }
            );

            // HR –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç HR –ø—Ä–æ–≥—Ä–∞–º–º—É HR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
            var hrAssignment = await ExecuteGraphQLAsync<AssignFlowResponse>(
                TestDataFactory.GraphQLQueries.AssignFlow,
                new { input = TestDataFactory.InputObjects.AssignFlowInput(hrSpecialistId, hrFlowId, DateTime.UtcNow.AddDays(14), hrBuddyId) }
            );

            _output.WriteLine("‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:");
            _output.WriteLine($"   - –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω 4 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º");
            _output.WriteLine($"   - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É");
            _output.WriteLine($"   - HR –ø–æ—Ç–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω HR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É");

            // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
            var allAssignmentsResponse = await ExecuteGraphQLAsync<GetFlowAssignmentsResponse>(
                TestDataFactory.GraphQLQueries.GetFlowAssignments,
                new { skip = 0, take = 100 }
            );

            allAssignmentsResponse.Assignments.Should().HaveCount(6);
            _output.WriteLine($"üìä –í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {allAssignmentsResponse.Assignments.Count}");
            _output.WriteLine("");

            // ===============================================
            // –ß–ê–°–¢–¨ 5: –°–û–¢–†–£–î–ù–ò–ö–ò –ù–ê–ß–ò–ù–ê–Æ–¢ –û–ë–£–ß–ï–ù–ò–ï
            // ===============================================
            _output.WriteLine("üéì === –ß–ê–°–¢–¨ 5: –°–û–¢–†–£–î–ù–ò–ö–ò –ù–ê–ß–ò–ù–ê–Æ–¢ –û–ë–£–ß–ï–ù–ò–ï ===");

            // –ú–æ–ª–æ–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
            var startMainFlow = await ExecuteGraphQLAsync<StartFlowResponse>(
                TestDataFactory.GraphQLQueries.StartFlow,
                new { input = TestDataFactory.InputObjects.StartFlowInput(assignment1.AssignFlow.AssignmentId) }
            );

            // –ú–æ–ª–æ–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫
            var startTechFlow = await ExecuteGraphQLAsync<StartFlowResponse>(
                TestDataFactory.GraphQLQueries.StartFlow,
                new { input = TestDataFactory.InputObjects.StartFlowInput(techAssignment.AssignFlow.AssignmentId) }
            );

            // –î–∏–∑–∞–π–Ω–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
            var startDesignerFlow = await ExecuteGraphQLAsync<StartFlowResponse>(
                TestDataFactory.GraphQLQueries.StartFlow,
                new { input = TestDataFactory.InputObjects.StartFlowInput(assignment2.AssignFlow.AssignmentId) }
            );

            _output.WriteLine("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–∞—á–∞–ª–∏ –æ–±—É—á–µ–Ω–∏–µ:");
            _output.WriteLine($"   - –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ (—Å—Ç–∞—Ç—É—Å: {startMainFlow.StartFlow.Status})");
            _output.WriteLine($"   - –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫ (—Å—Ç–∞—Ç—É—Å: {startTechFlow.StartFlow.Status})");
            _output.WriteLine($"   - –î–∏–∑–∞–π–Ω–µ—Ä: –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ (—Å—Ç–∞—Ç—É—Å: {startDesignerFlow.StartFlow.Status})");

            // ===============================================
            // –ß–ê–°–¢–¨ 6: –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ì–†–ï–°–°–ê –ù–ê–°–¢–ê–í–ù–ò–ö–ê–ú–ò
            // ===============================================
            _output.WriteLine("üìä === –ß–ê–°–¢–¨ 6: –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ì–†–ï–°–°–ê ===");

            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
            var devActiveAssignments = await ExecuteGraphQLAsync<GetActiveAssignmentsResponse>(
                TestDataFactory.GraphQLQueries.GetActiveAssignments,
                new { userId = juniorDevId }
            );

            devActiveAssignments.ActiveAssignments.Should().HaveCount(2);
            _output.WriteLine($"üë®‚Äçüíª –£ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {devActiveAssignments.ActiveAssignments.Count}");

            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞
            var designerActiveAssignments = await ExecuteGraphQLAsync<GetActiveAssignmentsResponse>(
                TestDataFactory.GraphQLQueries.GetActiveAssignments,
                new { userId = designerId }
            );

            designerActiveAssignments.ActiveAssignments.Should().HaveCount(1);
            _output.WriteLine($"üé® –£ –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {designerActiveAssignments.ActiveAssignments.Count}");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø–æ—Ç–æ–∫–∞–º
            var mainFlowAssignments = await ExecuteGraphQLAsync<GetFlowAssignmentsResponse>(
                TestDataFactory.GraphQLQueries.GetFlowAssignments,
                new { flowId = mainFlowId, skip = 0, take = 10 }
            );

            var techFlowAssignments = await ExecuteGraphQLAsync<GetFlowAssignmentsResponse>(
                TestDataFactory.GraphQLQueries.GetFlowAssignments,
                new { flowId = techFlowId, skip = 0, take = 10 }
            );

            _output.WriteLine($"üìã –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫: {mainFlowAssignments.Assignments.Count} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π");
            _output.WriteLine($"üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫: {techFlowAssignments.Assignments.Count} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π");

            // ===============================================
            // –ß–ê–°–¢–¨ 7: –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–£–ß–ï–ù–ò–Ø –ò –†–ï–ó–£–õ–¨–¢–ê–¢–´
            // ===============================================
            _output.WriteLine("üèÜ === –ß–ê–°–¢–¨ 7: –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–£–ß–ï–ù–ò–Ø ===");

            // –î–∏–∑–∞–π–Ω–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
            const string completeFlowMutation = @"
                mutation CompleteFlow($input: CompleteFlowInput!) {
                    completeFlow(input: $input) {
                        id
                        status
                        completedAt
                        progress
                    }
                }";

            var completeDesignerFlow = await ExecuteGraphQLAsync<CompleteFlowResponse>(
                completeFlowMutation,
                new { input = new { 
                    assignmentId = assignment2.AssignFlow.AssignmentId,
                    completionNotes = "–û—Ç–ª–∏—á–Ω–æ –∏–∑—É—á–∏–ª –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–∏–∑–∞–π–Ω–∞. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
                }}
            );

            completeDesignerFlow.CompleteFlow.Status.Should().Be("Completed");
            completeDesignerFlow.CompleteFlow.Progress.Should().Be(100);

            // –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫
            var completeTechFlow = await ExecuteGraphQLAsync<CompleteFlowResponse>(
                completeFlowMutation,
                new { input = new { 
                    assignmentId = techAssignment.AssignFlow.AssignmentId,
                    completionNotes = "–£—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–∏–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫ –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç–µ"
                }}
            );

            completeTechFlow.CompleteFlow.Status.Should().Be("Completed");
            completeTechFlow.CompleteFlow.Progress.Should().Be(100);

            _output.WriteLine("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:");
            _output.WriteLine($"   - –î–∏–∑–∞–π–Ω–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ (–ø—Ä–æ–≥—Ä–µ—Å—Å: {completeDesignerFlow.CompleteFlow.Progress}%)");
            _output.WriteLine($"   - –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫ (–ø—Ä–æ–≥—Ä–µ—Å—Å: {completeTechFlow.CompleteFlow.Progress}%)");

            // ===============================================
            // –ß–ê–°–¢–¨ 8: –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–´
            // ===============================================
            _output.WriteLine("üìà === –ß–ê–°–¢–¨ 8: –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===");

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
            var finalAssignmentsResponse = await ExecuteGraphQLAsync<GetFlowAssignmentsResponse>(
                TestDataFactory.GraphQLQueries.GetFlowAssignments,
                new { skip = 0, take = 100 }
            );

            var assignedCount = finalAssignmentsResponse.Assignments.Count(a => a.Status == "Assigned");
            var inProgressCount = finalAssignmentsResponse.Assignments.Count(a => a.Status == "InProgress");
            var completedCount = finalAssignmentsResponse.Assignments.Count(a => a.Status == "Completed");

            _output.WriteLine($"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:");
            _output.WriteLine($"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {allUsersResponse.Users.Count}");
            _output.WriteLine($"   üìö –ü–æ—Ç–æ–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è: {allFlowsResponse.Flows.Count}");
            _output.WriteLine($"   üìã –í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {finalAssignmentsResponse.Assignments.Count}");
            _output.WriteLine($"   ‚è≥ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {assignedCount}");
            _output.WriteLine($"   üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {inProgressCount}");
            _output.WriteLine($"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completedCount}");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            finalAssignmentsResponse.Assignments.Should().HaveCount(6);
            completedCount.Should().BeGreaterOrEqualTo(2);
            
            _output.WriteLine("");
            _output.WriteLine("üéâ === –ü–û–õ–ù–´–ô E2E –°–¶–ï–ù–ê–†–ò–ô –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û! ===");
            _output.WriteLine("üöÄ –°–∏—Å—Ç–µ–º–∞ Lauf –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å–æ –≤—Å–µ–º–∏ —Ä–æ–ª—è–º–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏!");
        }
        finally
        {
            GenerateHtmlReport("CompleteOnboardingProcess");
        }
    }

    [Fact]
    public async Task SystemStressTest_MultipleUsersAndFlows_ShouldHandleLoad()
    {
        try
        {
            _output.WriteLine("‚ö° === –ù–ê–ì–†–£–ó–û–ß–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ ===");

            // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            var tasks = new List<Task>();

            // –°–æ–∑–¥–∞–µ–º 10 –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
            for (int i = 1; i <= 10; i++)
            {
                tasks.Add(ExecuteGraphQLAsync<CreateUserResponse>(
                    TestDataFactory.GraphQLQueries.CreateUser,
                    new { input = TestDataFactory.InputObjects.CreateUserInput(
                        telegramId: 400000 + i,
                        email: $"moderator{i}@stress.test",
                        fullName: $"–°—Ç—Ä–µ—Å—Å –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {i}",
                        position: "Test Moderator"
                    )}
                ));
            }

            // –°–æ–∑–¥–∞–µ–º 20 –±–∞–¥–¥–∏
            for (int i = 1; i <= 20; i++)
            {
                tasks.Add(ExecuteGraphQLAsync<CreateUserResponse>(
                    TestDataFactory.GraphQLQueries.CreateUser,
                    new { input = TestDataFactory.InputObjects.CreateUserInput(
                        telegramId: 500000 + i,
                        email: $"buddy{i}@stress.test",
                        fullName: $"–°—Ç—Ä–µ—Å—Å –ë–∞–¥–¥–∏ {i}",
                        position: "Test Buddy"
                    )}
                ));
            }

            // –°–æ–∑–¥–∞–µ–º 50 –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for (int i = 1; i <= 50; i++)
            {
                tasks.Add(ExecuteGraphQLAsync<CreateUserResponse>(
                    TestDataFactory.GraphQLQueries.CreateUser,
                    new { input = TestDataFactory.InputObjects.CreateUserInput(
                        telegramId: 600000 + i,
                        email: $"user{i}@stress.test",
                        fullName: $"–°—Ç—Ä–µ—Å—Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i}",
                        position: "Test User"
                    )}
                ));
            }

            await Task.WhenAll(tasks);
            
            _output.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {tasks.Count}");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            var stressUsersResponse = await ExecuteGraphQLAsync<GetUsersResponse>(
                TestDataFactory.GraphQLQueries.GetUsers,
                new { skip = 0, take = 200 }
            );

            stressUsersResponse.Users.Should().HaveCountGreaterOrEqualTo(80);
            _output.WriteLine($"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {stressUsersResponse.Users.Count}");
        }
        finally
        {
            GenerateHtmlReport("SystemStressTest");
        }
    }
}

